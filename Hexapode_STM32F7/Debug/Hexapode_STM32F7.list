
Hexapode_STM32F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006818  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a74  08006a74  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a7c  08006a7c  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08006ae0  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08006b80  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000918  2000019c  08006c20  0002019c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000ab4  08006c20  00020ab4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000142b6  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002b32  00000000  00000000  000344c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ee8  00000000  00000000  00036ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b7d  00000000  00000000  00037ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000277e6  00000000  00000000  00038a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00013171  00000000  00000000  00060243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f4202  00000000  00000000  000733b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004358  00000000  00000000  001675b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000055  00000000  00000000  0016b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069d0 	.word	0x080069d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	080069d0 	.word	0x080069d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convcomplete=0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  convcomplete=1;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000958 	.word	0x20000958

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fd9e 	bl	8001122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f85d 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9ed 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 f9cd 	bl	800098c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005f2:	f000 f96d 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f6:	f000 f99b 	bl	8000930 <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 80005fa:	f000 f91b 	bl	8000834 <MX_ETH_Init>
  MX_ADC1_Init();
 80005fe:	f000 f8b9 	bl	8000774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,rx_data,20);
 8000602:	2214      	movs	r2, #20
 8000604:	491e      	ldr	r1, [pc, #120]	; (8000680 <main+0xa4>)
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <main+0xa8>)
 8000608:	f004 f83f 	bl	800468a <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)rawValues,2);
 800060c:	2202      	movs	r2, #2
 800060e:	491e      	ldr	r1, [pc, #120]	; (8000688 <main+0xac>)
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <main+0xb0>)
 8000612:	f000 ff5b 	bl	80014cc <HAL_ADC_Start_DMA>
    // Voltage_potentiometer =HAL_ADC_GetValue(&hadc1);
    // sprintf(message," La tension est de %d \r\n",Voltage_potentiometer);
    // HAL_UART_Transmit(&huart3,(uint8_t)message,strlen(message),HAL_MAX_DELAY);
    // HAL_Delay(500);

    while (convcomplete!=1)
 8000616:	e02d      	b.n	8000674 <main+0x98>
    {
      for(uint8_t ibcl=0;ibcl<hadc1.Init.NbrOfConversion;ibcl++)
 8000618:	2300      	movs	r3, #0
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	e00a      	b.n	8000634 <main+0x58>
      {
        pot1=(uint16_t)rawValues[0];
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <main+0xac>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <main+0xb4>)
 8000624:	801a      	strh	r2, [r3, #0]
        pot2=(uint16_t)rawValues[1];
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0xac>)
 8000628:	885a      	ldrh	r2, [r3, #2]
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <main+0xb8>)
 800062c:	801a      	strh	r2, [r3, #0]
      for(uint8_t ibcl=0;ibcl<hadc1.Init.NbrOfConversion;ibcl++)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	3301      	adds	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <main+0xb0>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	429a      	cmp	r2, r3
 800063c:	d3ef      	bcc.n	800061e <main+0x42>
      }
      sprintf(message,"La valeur de pot1 est %d et la valeur de pot2 est %d \r\n",pot1,pot2);
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <main+0xb4>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <main+0xb8>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	4913      	ldr	r1, [pc, #76]	; (8000698 <main+0xbc>)
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <main+0xc0>)
 800064c:	f005 fd1c 	bl	8006088 <siprintf>
      HAL_UART_Transmit(&huart3,(uint8_t)message,strlen(message),HAL_MAX_DELAY);
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <main+0xc0>)
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461c      	mov	r4, r3
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <main+0xc0>)
 8000658:	f7ff fdda 	bl	8000210 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	4621      	mov	r1, r4
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <main+0xa8>)
 8000668:	f003 ff8c 	bl	8004584 <HAL_UART_Transmit>

      HAL_Delay(500);
 800066c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000670:	f000 fdb4 	bl	80011dc <HAL_Delay>
    while (convcomplete!=1)
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <main+0xc4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d1cd      	bne.n	8000618 <main+0x3c>
 800067c:	e7fa      	b.n	8000674 <main+0x98>
 800067e:	bf00      	nop
 8000680:	200008d8 	.word	0x200008d8
 8000684:	20000348 	.word	0x20000348
 8000688:	20000954 	.word	0x20000954
 800068c:	200001f0 	.word	0x200001f0
 8000690:	20000950 	.word	0x20000950
 8000694:	20000952 	.word	0x20000952
 8000698:	080069e8 	.word	0x080069e8
 800069c:	200008ec 	.word	0x200008ec
 80006a0:	20000958 	.word	0x20000958

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fd08 	bl	80060c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c8:	f002 fe44 	bl	8003354 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a26      	ldr	r2, [pc, #152]	; (800076c <SystemClock_Config+0xc8>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <SystemClock_Config+0xcc>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000718:	2348      	movs	r3, #72	; 0x48
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000720:	2303      	movs	r3, #3
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fe23 	bl	8003374 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 f9fc 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2102      	movs	r1, #2
 8000754:	4618      	mov	r0, r3
 8000756:	f003 f8b1 	bl	80038bc <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000760:	f000 f9e6 	bl	8000b30 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_ADC1_Init+0xb4>)
 8000788:	4a28      	ldr	r2, [pc, #160]	; (800082c <MX_ADC1_Init+0xb8>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <MX_ADC1_Init+0xb4>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <MX_ADC1_Init+0xb4>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <MX_ADC1_Init+0xb4>)
 800079a:	2201      	movs	r2, #1
 800079c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007b4:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_ADC1_Init+0xbc>)
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007d4:	f000 fd26 	bl	8001224 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 f9a7 	bl	8000b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007ea:	2307      	movs	r3, #7
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007f4:	f000 ff82 	bl	80016fc <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 f997 	bl	8000b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000802:	230d      	movs	r3, #13
 8000804:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000806:	2302      	movs	r3, #2
 8000808:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_ADC1_Init+0xb4>)
 8000810:	f000 ff74 	bl	80016fc <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800081a:	f000 f989 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200001f0 	.word	0x200001f0
 800082c:	40012000 	.word	0x40012000
 8000830:	0f000001 	.word	0x0f000001

08000834 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_ETH_Init+0x84>)
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <MX_ETH_Init+0x88>)
 800083c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ETH_Init+0x8c>)
 800084c:	22e1      	movs	r2, #225	; 0xe1
 800084e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000852:	2200      	movs	r2, #0
 8000854:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_ETH_Init+0x8c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_ETH_Init+0x84>)
 8000864:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MX_ETH_Init+0x8c>)
 8000866:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_ETH_Init+0x84>)
 800086a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800086e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_ETH_Init+0x84>)
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_ETH_Init+0x90>)
 8000874:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_ETH_Init+0x84>)
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_ETH_Init+0x94>)
 800087a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_ETH_Init+0x84>)
 800087e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000882:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_ETH_Init+0x84>)
 8000886:	f001 ff31 	bl	80026ec <HAL_ETH_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f94e 	bl	8000b30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000894:	2238      	movs	r2, #56	; 0x38
 8000896:	2100      	movs	r1, #0
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_ETH_Init+0x98>)
 800089a:	f005 fc15 	bl	80060c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_ETH_Init+0x98>)
 80008a0:	2221      	movs	r2, #33	; 0x21
 80008a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_ETH_Init+0x98>)
 80008a6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_ETH_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000298 	.word	0x20000298
 80008bc:	40028000 	.word	0x40028000
 80008c0:	2000095c 	.word	0x2000095c
 80008c4:	200000fc 	.word	0x200000fc
 80008c8:	2000005c 	.word	0x2000005c
 80008cc:	200001b8 	.word	0x200001b8

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART3_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART3_UART_Init+0x58>)
 8000914:	f003 fde8 	bl	80044e8 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f907 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000348 	.word	0x20000348
 800092c:	40004800 	.word	0x40004800

08000930 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800093a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2206      	movs	r2, #6
 8000940:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2202      	movs	r2, #2
 8000946:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2202      	movs	r2, #2
 8000952:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2201      	movs	r2, #1
 8000958:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000968:	2201      	movs	r2, #1
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000974:	f002 fba5 	bl	80030c2 <HAL_PCD_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f8d7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200003d0 	.word	0x200003d0

0800098c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DMA_Init+0x38>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <MX_DMA_Init+0x38>)
 8000998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_DMA_Init+0x38>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2038      	movs	r0, #56	; 0x38
 80009b0:	f001 fa5b 	bl	8001e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009b4:	2038      	movs	r0, #56	; 0x38
 80009b6:	f001 fa74 	bl	8001ea2 <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b47      	ldr	r3, [pc, #284]	; (8000afc <MX_GPIO_Init+0x134>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a46      	ldr	r2, [pc, #280]	; (8000afc <MX_GPIO_Init+0x134>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <MX_GPIO_Init+0x134>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	4b41      	ldr	r3, [pc, #260]	; (8000afc <MX_GPIO_Init+0x134>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a40      	ldr	r2, [pc, #256]	; (8000afc <MX_GPIO_Init+0x134>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a34      	ldr	r2, [pc, #208]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a28      	ldr	r2, [pc, #160]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_GPIO_Init+0x134>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a74:	4822      	ldr	r0, [pc, #136]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000a76:	f002 fb0b 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <MX_GPIO_Init+0x13c>)
 8000a80:	f002 fb06 	bl	8003090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <MX_GPIO_Init+0x140>)
 8000a9c:	f002 f94c 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aa0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_GPIO_Init+0x138>)
 8000aba:	f002 f93d 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <MX_GPIO_Init+0x13c>)
 8000ad6:	f002 f92f 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_GPIO_Init+0x13c>)
 8000aee:	f002 f923 	bl	8002d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020800 	.word	0x40020800

08000b0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  HAL_UART_Transmit(&huart3,rx_data,20,20);
 8000b14:	2314      	movs	r3, #20
 8000b16:	2214      	movs	r2, #20
 8000b18:	4903      	ldr	r1, [pc, #12]	; (8000b28 <HAL_UART_RxCpltCallback+0x1c>)
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <HAL_UART_RxCpltCallback+0x20>)
 8000b1c:	f003 fd32 	bl	8004584 <HAL_UART_Transmit>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200008d8 	.word	0x200008d8
 8000b2c:	20000348 	.word	0x20000348

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a31      	ldr	r2, [pc, #196]	; (8000c68 <HAL_ADC_MspInit+0xe4>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d15b      	bne.n	8000c5e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <HAL_ADC_MspInit+0xe8>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <HAL_ADC_MspInit+0xe8>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <HAL_ADC_MspInit+0xe8>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_ADC_MspInit+0xe8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <HAL_ADC_MspInit+0xe8>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <HAL_ADC_MspInit+0xe8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000bd6:	2309      	movs	r3, #9
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <HAL_ADC_MspInit+0xec>)
 8000bea:	f002 f8a5 	bl	8002d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <HAL_ADC_MspInit+0xf4>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c34:	f001 f950 	bl	8001ed8 <HAL_DMA_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000c3e:	f7ff ff77 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_ADC_MspInit+0xf0>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2101      	movs	r1, #1
 8000c52:	2012      	movs	r0, #18
 8000c54:	f001 f909 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c58:	2012      	movs	r0, #18
 8000c5a:	f001 f922 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40012000 	.word	0x40012000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800
 8000c74:	20000238 	.word	0x20000238
 8000c78:	40026410 	.word	0x40026410

08000c7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a4e      	ldr	r2, [pc, #312]	; (8000dd4 <HAL_ETH_MspInit+0x158>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f040 8096 	bne.w	8000dcc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce8:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	4a3a      	ldr	r2, [pc, #232]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a34      	ldr	r2, [pc, #208]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d30:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d48:	2332      	movs	r3, #50	; 0x32
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d58:	230b      	movs	r3, #11
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	481e      	ldr	r0, [pc, #120]	; (8000ddc <HAL_ETH_MspInit+0x160>)
 8000d64:	f001 ffe8 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d68:	2386      	movs	r3, #134	; 0x86
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d78:	230b      	movs	r3, #11
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4817      	ldr	r0, [pc, #92]	; (8000de0 <HAL_ETH_MspInit+0x164>)
 8000d84:	f001 ffd8 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d9a:	230b      	movs	r3, #11
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_ETH_MspInit+0x168>)
 8000da6:	f001 ffc7 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000daa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <HAL_ETH_MspInit+0x16c>)
 8000dc8:	f001 ffb6 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3738      	adds	r7, #56	; 0x38
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40028000 	.word	0x40028000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40021800 	.word	0x40021800

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0aa      	sub	sp, #168	; 0xa8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2284      	movs	r2, #132	; 0x84
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 f95b 	bl	80060c8 <memset>
  if(huart->Instance==USART3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <HAL_UART_MspInit+0xc4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d144      	bne.n	8000ea6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 ff6c 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e36:	f7ff fe7b 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_UART_MspInit+0xcc>)
 8000e92:	f001 ff51 	bl	8002d38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2027      	movs	r0, #39	; 0x27
 8000e9c:	f000 ffe5 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ea0:	2027      	movs	r0, #39	; 0x27
 8000ea2:	f000 fffe 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	37a8      	adds	r7, #168	; 0xa8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0ac      	sub	sp, #176	; 0xb0
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	2284      	movs	r2, #132	; 0x84
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 f8f3 	bl	80060c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eea:	d159      	bne.n	8000fa0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	f107 0318 	add.w	r3, r7, #24
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 ff03 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f08:	f7ff fe12 	bl	8000b30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6313      	str	r3, [r2, #48]	; 0x30
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f24:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f3e:	230a      	movs	r3, #10
 8000f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <HAL_PCD_MspInit+0xf0>)
 8000f4c:	f001 fef4 	bl	8002d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4810      	ldr	r0, [pc, #64]	; (8000fac <HAL_PCD_MspInit+0xf0>)
 8000f6c:	f001 fee4 	bl	8002d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7a:	6353      	str	r3, [r2, #52]	; 0x34
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6453      	str	r3, [r2, #68]	; 0x44
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_PCD_MspInit+0xec>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	37b0      	adds	r7, #176	; 0xb0
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f8ce 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <ADC_IRQHandler+0x10>)
 800100a:	f000 f94f 	bl	80012ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001f0 	.word	0x200001f0

08001018 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART3_IRQHandler+0x10>)
 800101e:	f003 fb79 	bl	8004714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000348 	.word	0x20000348

0800102c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA2_Stream0_IRQHandler+0x10>)
 8001032:	f001 f8f1 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000238 	.word	0x20000238

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f005 f832 	bl	80060d8 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20050000 	.word	0x20050000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000964 	.word	0x20000964
 80010a8:	20000ab8 	.word	0x20000ab8

080010ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f004 fff1 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fa6b 	bl	80005dc <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001114:	08006a84 	.word	0x08006a84
  ldr r2, =_sbss
 8001118:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 800111c:	20000ab4 	.word	0x20000ab4

08001120 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <CAN1_RX0_IRQHandler>

08001122 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001126:	2003      	movs	r0, #3
 8001128:	f000 fe94 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f805 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001132:	f7ff fd03 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 feaf 	bl	8001ebe <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 fe77 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000968 	.word	0x20000968

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000968 	.word	0x20000968

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e031      	b.n	800129e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fc9e 	bl	8000b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_ADC_Init+0x84>)
 8001268:	4013      	ands	r3, r2
 800126a:	f043 0202 	orr.w	r2, r3, #2
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fb98 	bl	80019a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f023 0303 	bic.w	r3, r3, #3
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
 800128e:	e001      	b.n	8001294 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	ffffeefd 	.word	0xffffeefd

080012ac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d049      	beq.n	8001376 <HAL_ADC_IRQHandler+0xca>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d046      	beq.n	8001376 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d12b      	bne.n	8001366 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001312:	2b00      	cmp	r3, #0
 8001314:	d127      	bne.n	8001366 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800132e:	2b00      	cmp	r3, #0
 8001330:	d119      	bne.n	8001366 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0220 	bic.w	r2, r2, #32
 8001340:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f928 	bl	80005bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f06f 0212 	mvn.w	r2, #18
 8001374:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001384:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d057      	beq.n	800143c <HAL_ADC_IRQHandler+0x190>
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d054      	beq.n	800143c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d139      	bne.n	800142c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d12b      	bne.n	800142c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d124      	bne.n	800142c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d11d      	bne.n	800142c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d119      	bne.n	800142c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001406:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d105      	bne.n	800142c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fc37 	bl	8001ca0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f06f 020c 	mvn.w	r2, #12
 800143a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d017      	beq.n	8001482 <HAL_ADC_IRQHandler+0x1d6>
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d014      	beq.n	8001482 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b01      	cmp	r3, #1
 8001464:	d10d      	bne.n	8001482 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f92e 	bl	80016d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f06f 0201 	mvn.w	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001490:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d015      	beq.n	80014c4 <HAL_ADC_IRQHandler+0x218>
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d012      	beq.n	80014c4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f043 0202 	orr.w	r2, r3, #2
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f06f 0220 	mvn.w	r2, #32
 80014b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f917 	bl	80016e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f06f 0220 	mvn.w	r2, #32
 80014c2:	601a      	str	r2, [r3, #0]
  }
}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start_DMA+0x1e>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e0d4      	b.n	8001694 <HAL_ADC_Start_DMA+0x1c8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d018      	beq.n	8001532 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <HAL_ADC_Start_DMA+0x1d0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <HAL_ADC_Start_DMA+0x1d4>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9a      	lsrs	r2, r3, #18
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001524:	e002      	b.n	800152c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3b01      	subs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	f040 809c 	bne.w	800167a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001546:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <HAL_ADC_Start_DMA+0x1d8>)
 8001548:	4013      	ands	r3, r2
 800154a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001568:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157c:	d106      	bne.n	800158c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f023 0206 	bic.w	r2, r3, #6
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
 800158a:	e002      	b.n	8001592 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <HAL_ADC_Start_DMA+0x1dc>)
 80015a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	4a41      	ldr	r2, [pc, #260]	; (80016ac <HAL_ADC_Start_DMA+0x1e0>)
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	4a40      	ldr	r2, [pc, #256]	; (80016b0 <HAL_ADC_Start_DMA+0x1e4>)
 80015b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	334c      	adds	r3, #76	; 0x4c
 80015e6:	4619      	mov	r1, r3
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f000 fd22 	bl	8002034 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_ADC_Start_DMA+0x1e8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10f      	bne.n	800161c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d143      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e03a      	b.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <HAL_ADC_Start_DMA+0x1ec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10e      	bne.n	8001644 <HAL_ADC_Start_DMA+0x178>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001642:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_ADC_Start_DMA+0x1e8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d120      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_ADC_Start_DMA+0x1f0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d11b      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d114      	bne.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00b      	b.n	8001692 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f043 0210 	orr.w	r2, r3, #16
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	fffff8fe 	.word	0xfffff8fe
 80016a8:	08001b9d 	.word	0x08001b9d
 80016ac:	08001c57 	.word	0x08001c57
 80016b0:	08001c73 	.word	0x08001c73
 80016b4:	40012300 	.word	0x40012300
 80016b8:	40012000 	.word	0x40012000
 80016bc:	40012200 	.word	0x40012200

080016c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1c>
 8001714:	2302      	movs	r3, #2
 8001716:	e136      	b.n	8001986 <HAL_ADC_ConfigChannel+0x28a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d93a      	bls.n	800179e <HAL_ADC_ConfigChannel+0xa2>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001730:	d035      	beq.n	800179e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68d9      	ldr	r1, [r3, #12]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	3b1e      	subs	r3, #30
 8001748:	2207      	movs	r2, #7
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	400a      	ands	r2, r1
 8001756:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a8d      	ldr	r2, [pc, #564]	; (8001994 <HAL_ADC_ConfigChannel+0x298>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10a      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68d9      	ldr	r1, [r3, #12]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	061a      	lsls	r2, r3, #24
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001776:	e035      	b.n	80017e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68d9      	ldr	r1, [r3, #12]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	4603      	mov	r3, r0
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4403      	add	r3, r0
 8001790:	3b1e      	subs	r3, #30
 8001792:	409a      	lsls	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800179c:	e022      	b.n	80017e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	2207      	movs	r2, #7
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43da      	mvns	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	400a      	ands	r2, r1
 80017c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6919      	ldr	r1, [r3, #16]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	4603      	mov	r3, r0
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4403      	add	r3, r0
 80017da:	409a      	lsls	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d824      	bhi.n	8001836 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b05      	subs	r3, #5
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b05      	subs	r3, #5
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	; 0x34
 8001834:	e04c      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d824      	bhi.n	8001888 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b23      	subs	r3, #35	; 0x23
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b23      	subs	r3, #35	; 0x23
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
 8001886:	e023      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b41      	subs	r3, #65	; 0x41
 800189a:	221f      	movs	r2, #31
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43da      	mvns	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	400a      	ands	r2, r1
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b41      	subs	r3, #65	; 0x41
 80018c4:	fa00 f203 	lsl.w	r2, r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_ADC_ConfigChannel+0x29c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10a      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1f4>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a2c      	ldr	r2, [pc, #176]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 80018ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a28      	ldr	r2, [pc, #160]	; (8001998 <HAL_ADC_ConfigChannel+0x29c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10f      	bne.n	800191a <HAL_ADC_ConfigChannel+0x21e>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d10b      	bne.n	800191a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a25      	ldr	r2, [pc, #148]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001908:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800190c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800190e:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_ADC_ConfigChannel+0x29c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d12b      	bne.n	800197c <HAL_ADC_ConfigChannel+0x280>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <HAL_ADC_ConfigChannel+0x298>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d003      	beq.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b11      	cmp	r3, #17
 8001934:	d122      	bne.n	800197c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 800193c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001940:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <HAL_ADC_ConfigChannel+0x2a0>)
 8001948:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800194c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <HAL_ADC_ConfigChannel+0x298>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9a      	lsrs	r2, r3, #18
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800196e:	e002      	b.n	8001976 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3b01      	subs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	10000012 	.word	0x10000012
 8001998:	40012000 	.word	0x40012000
 800199c:	40012300 	.word	0x40012300
 80019a0:	20000000 	.word	0x20000000
 80019a4:	431bde83 	.word	0x431bde83

080019a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019b0:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <ADC_Init+0x1ec>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <ADC_Init+0x1ec>)
 80019b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <ADC_Init+0x1ec>)
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4973      	ldr	r1, [pc, #460]	; (8001b94 <ADC_Init+0x1ec>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	021a      	lsls	r2, r3, #8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <ADC_Init+0x1f0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d022      	beq.n	8001a82 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	e00f      	b.n	8001aa2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0202 	bic.w	r2, r2, #2
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	005a      	lsls	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01b      	beq.n	8001b08 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ade:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	3b01      	subs	r3, #1
 8001afc:	035a      	lsls	r2, r3, #13
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	e007      	b.n	8001b18 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	051a      	lsls	r2, r3, #20
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6899      	ldr	r1, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b5a:	025a      	lsls	r2, r3, #9
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	029a      	lsls	r2, r3, #10
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	609a      	str	r2, [r3, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40012300 	.word	0x40012300
 8001b98:	0f000001 	.word	0x0f000001

08001b9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d13c      	bne.n	8001c30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d12b      	bne.n	8001c28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d127      	bne.n	8001c28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d119      	bne.n	8001c28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0220 	bic.w	r2, r2, #32
 8001c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7fe fcc7 	bl	80005bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c2e:	e00e      	b.n	8001c4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff fd53 	bl	80016e8 <HAL_ADC_ErrorCallback>
}
 8001c42:	e004      	b.n	8001c4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fd2b 	bl	80016c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f043 0204 	orr.w	r2, r3, #4
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fd28 	bl	80016e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	05fa0000 	.word	0x05fa0000

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	; (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff3e 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff8e 	bl	8001da8 <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5d 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff31 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff f96e 	bl	80011c4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e099      	b.n	8002028 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f14:	e00f      	b.n	8001f36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f16:	f7ff f955 	bl	80011c4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d908      	bls.n	8001f36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e078      	b.n	8002028 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e8      	bne.n	8001f16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_DMA_Init+0x158>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d107      	bne.n	8001fa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f023 0307 	bic.w	r3, r3, #7
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d117      	bne.n	8001ffa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fb09 	bl	80025f4 <DMA_CheckFifoParam>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e016      	b.n	8002028 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fac0 	bl	8002588 <DMA_CalcBaseAndBitshift>
 8002008:	4603      	mov	r3, r0
 800200a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	223f      	movs	r2, #63	; 0x3f
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	f010803f 	.word	0xf010803f

08002034 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_DMA_Start_IT+0x26>
 8002056:	2302      	movs	r3, #2
 8002058:	e048      	b.n	80020ec <HAL_DMA_Start_IT+0xb8>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d137      	bne.n	80020de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa52 	bl	800252c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	223f      	movs	r2, #63	; 0x3f
 800208e:	409a      	lsls	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0216 	orr.w	r2, r2, #22
 80020a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0208 	orr.w	r2, r2, #8
 80020ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e005      	b.n	80020ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002102:	f7ff f85f 	bl	80011c4 <HAL_GetTick>
 8002106:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d008      	beq.n	8002126 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e052      	b.n	80021cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0216 	bic.w	r2, r2, #22
 8002134:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002144:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_DMA_Abort+0x62>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002176:	e013      	b.n	80021a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002178:	f7ff f824 	bl	80011c4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b05      	cmp	r3, #5
 8002184:	d90c      	bls.n	80021a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e015      	b.n	80021cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e4      	bne.n	8002178 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	223f      	movs	r2, #63	; 0x3f
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d004      	beq.n	80021f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00c      	b.n	800220c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2205      	movs	r2, #5
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002224:	4b8e      	ldr	r3, [pc, #568]	; (8002460 <HAL_DMA_IRQHandler+0x248>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a8e      	ldr	r2, [pc, #568]	; (8002464 <HAL_DMA_IRQHandler+0x24c>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	2208      	movs	r2, #8
 8002244:	409a      	lsls	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d01a      	beq.n	8002284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2208      	movs	r2, #8
 8002272:	409a      	lsls	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2201      	movs	r2, #1
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d012      	beq.n	80022ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2201      	movs	r2, #1
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	f043 0202 	orr.w	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	2204      	movs	r2, #4
 80022c0:	409a      	lsls	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00b      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2204      	movs	r2, #4
 80022de:	409a      	lsls	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2210      	movs	r2, #16
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d043      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03c      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2210      	movs	r2, #16
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d018      	beq.n	800235a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d024      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
 8002346:	e01f      	b.n	8002388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
 8002358:	e016      	b.n	8002388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d107      	bne.n	8002378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0208 	bic.w	r2, r2, #8
 8002376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2220      	movs	r2, #32
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 808f 	beq.w	80024b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8087 	beq.w	80024b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2220      	movs	r2, #32
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d136      	bne.n	8002430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0216 	bic.w	r2, r2, #22
 80023d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x1da>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0208 	bic.w	r2, r2, #8
 8002400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	223f      	movs	r2, #63	; 0x3f
 8002408:	409a      	lsls	r2, r3
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002422:	2b00      	cmp	r3, #0
 8002424:	d07e      	beq.n	8002524 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
        }
        return;
 800242e:	e079      	b.n	8002524 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01d      	beq.n	800247a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10d      	bne.n	8002468 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	2b00      	cmp	r3, #0
 8002452:	d031      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
 800245c:	e02c      	b.n	80024b8 <HAL_DMA_IRQHandler+0x2a0>
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000
 8002464:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d023      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
 8002478:	e01e      	b.n	80024b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10f      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0210 	bic.w	r2, r2, #16
 8002496:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d032      	beq.n	8002526 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d022      	beq.n	8002512 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2205      	movs	r2, #5
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3301      	adds	r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d307      	bcc.n	8002500 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f2      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x2cc>
 80024fe:	e000      	b.n	8002502 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002500:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	4798      	blx	r3
 8002522:	e000      	b.n	8002526 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002524:	bf00      	nop
    }
  }
}
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002548:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d108      	bne.n	800256c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800256a:	e007      	b.n	800257c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	60da      	str	r2, [r3, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3b10      	subs	r3, #16
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <DMA_CalcBaseAndBitshift+0x60>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <DMA_CalcBaseAndBitshift+0x64>)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d908      	bls.n	80025c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <DMA_CalcBaseAndBitshift+0x68>)
 80025be:	4013      	ands	r3, r2
 80025c0:	1d1a      	adds	r2, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58
 80025c6:	e006      	b.n	80025d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <DMA_CalcBaseAndBitshift+0x68>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	aaaaaaab 	.word	0xaaaaaaab
 80025ec:	08006a38 	.word	0x08006a38
 80025f0:	fffffc00 	.word	0xfffffc00

080025f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11f      	bne.n	800264e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d856      	bhi.n	80026c2 <DMA_CheckFifoParam+0xce>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <DMA_CheckFifoParam+0x28>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	0800262d 	.word	0x0800262d
 8002620:	0800263f 	.word	0x0800263f
 8002624:	0800262d 	.word	0x0800262d
 8002628:	080026c3 	.word	0x080026c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d046      	beq.n	80026c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263c:	e043      	b.n	80026c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002646:	d140      	bne.n	80026ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e03d      	b.n	80026ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002656:	d121      	bne.n	800269c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d837      	bhi.n	80026ce <DMA_CheckFifoParam+0xda>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <DMA_CheckFifoParam+0x70>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002675 	.word	0x08002675
 8002668:	0800267b 	.word	0x0800267b
 800266c:	08002675 	.word	0x08002675
 8002670:	0800268d 	.word	0x0800268d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      break;
 8002678:	e030      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d025      	beq.n	80026d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268a:	e022      	b.n	80026d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002694:	d11f      	bne.n	80026d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800269a:	e01c      	b.n	80026d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d903      	bls.n	80026aa <DMA_CheckFifoParam+0xb6>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d003      	beq.n	80026b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026a8:	e018      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
      break;
 80026ae:	e015      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	e00b      	b.n	80026da <DMA_CheckFifoParam+0xe6>
      break;
 80026c2:	bf00      	nop
 80026c4:	e00a      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      break;
 80026c6:	bf00      	nop
 80026c8:	e008      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e006      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      break;
 80026ce:	bf00      	nop
 80026d0:	e004      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e002      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      break;   
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
    }
  } 
  
  return status; 
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06a      	b.n	80027d4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2223      	movs	r2, #35	; 0x23
 800270c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fe fab3 	bl	8000c7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_ETH_Init+0xf0>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a30      	ldr	r2, [pc, #192]	; (80027dc <HAL_ETH_Init+0xf0>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_ETH_Init+0xf0>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <HAL_ETH_Init+0xf4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <HAL_ETH_Init+0xf4>)
 8002734:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002738:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_ETH_Init+0xf4>)
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4927      	ldr	r1, [pc, #156]	; (80027e0 <HAL_ETH_Init+0xf4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_ETH_Init+0xf4>)
 800274a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002762:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002764:	f7fe fd2e 	bl	80011c4 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800276a:	e011      	b.n	8002790 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800276c:	f7fe fd2a 	bl	80011c4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800277a:	d909      	bls.n	8002790 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2204      	movs	r2, #4
 8002780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	22e0      	movs	r2, #224	; 0xe0
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e4      	bne.n	800276c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f958 	bl	8002a58 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f9ff 	bl	8002bac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa55 	bl	8002c5e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	461a      	mov	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f9bd 	bl	8002b3c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2210      	movs	r2, #16
 80027ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40013800 	.word	0x40013800

080027e4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4b51      	ldr	r3, [pc, #324]	; (8002940 <ETH_SetMACConfig+0x15c>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7c1b      	ldrb	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <ETH_SetMACConfig+0x28>
 8002806:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800280a:	e000      	b.n	800280e <ETH_SetMACConfig+0x2a>
 800280c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	7c5b      	ldrb	r3, [r3, #17]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <ETH_SetMACConfig+0x38>
 8002816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800281a:	e000      	b.n	800281e <ETH_SetMACConfig+0x3a>
 800281c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800281e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002824:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	7fdb      	ldrb	r3, [r3, #31]
 800282a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800282c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002832:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	7f92      	ldrb	r2, [r2, #30]
 8002838:	2a00      	cmp	r2, #0
 800283a:	d102      	bne.n	8002842 <ETH_SetMACConfig+0x5e>
 800283c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002840:	e000      	b.n	8002844 <ETH_SetMACConfig+0x60>
 8002842:	2200      	movs	r2, #0
                        macconf->Speed |
 8002844:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7f1b      	ldrb	r3, [r3, #28]
 800284a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800284c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002852:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	791b      	ldrb	r3, [r3, #4]
 8002858:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800285a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002862:	2a00      	cmp	r2, #0
 8002864:	d102      	bne.n	800286c <ETH_SetMACConfig+0x88>
 8002866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286a:	e000      	b.n	800286e <ETH_SetMACConfig+0x8a>
 800286c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800286e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	7bdb      	ldrb	r3, [r3, #15]
 8002874:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002876:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800287c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002884:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002886:	4313      	orrs	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800289e:	2001      	movs	r0, #1
 80028a0:	f7fe fc9c 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	d101      	bne.n	80028d2 <ETH_SetMACConfig+0xee>
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	e000      	b.n	80028d4 <ETH_SetMACConfig+0xf0>
 80028d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028d4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80028e2:	2a01      	cmp	r2, #1
 80028e4:	d101      	bne.n	80028ea <ETH_SetMACConfig+0x106>
 80028e6:	2208      	movs	r2, #8
 80028e8:	e000      	b.n	80028ec <ETH_SetMACConfig+0x108>
 80028ea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80028f4:	2a01      	cmp	r2, #1
 80028f6:	d101      	bne.n	80028fc <ETH_SetMACConfig+0x118>
 80028f8:	2204      	movs	r2, #4
 80028fa:	e000      	b.n	80028fe <ETH_SetMACConfig+0x11a>
 80028fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002906:	2a01      	cmp	r2, #1
 8002908:	d101      	bne.n	800290e <ETH_SetMACConfig+0x12a>
 800290a:	2202      	movs	r2, #2
 800290c:	e000      	b.n	8002910 <ETH_SetMACConfig+0x12c>
 800290e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002910:	4313      	orrs	r3, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002928:	2001      	movs	r0, #1
 800292a:	f7fe fc57 	bl	80011dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	ff20810f 	.word	0xff20810f

08002944 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <ETH_SetDMAConfig+0x110>)
 800295e:	4013      	ands	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	7b1b      	ldrb	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <ETH_SetDMAConfig+0x2c>
 800296a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800296e:	e000      	b.n	8002972 <ETH_SetDMAConfig+0x2e>
 8002970:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7b5b      	ldrb	r3, [r3, #13]
 8002976:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002978:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	7f52      	ldrb	r2, [r2, #29]
 800297e:	2a00      	cmp	r2, #0
 8002980:	d102      	bne.n	8002988 <ETH_SetDMAConfig+0x44>
 8002982:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002986:	e000      	b.n	800298a <ETH_SetDMAConfig+0x46>
 8002988:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800298a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	7b9b      	ldrb	r3, [r3, #14]
 8002990:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002992:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002998:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	7f1b      	ldrb	r3, [r3, #28]
 800299e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7f9b      	ldrb	r3, [r3, #30]
 80029a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029b8:	4313      	orrs	r3, r2
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c8:	461a      	mov	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7fe fbfe 	bl	80011dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	791b      	ldrb	r3, [r3, #4]
 80029f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80029fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a04:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a0c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a0e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a16:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a1c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a2a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7fe fbcf 	bl	80011dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	f8de3f23 	.word	0xf8de3f23

08002a58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b0a6      	sub	sp, #152	; 0x98
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a94:	2300      	movs	r3, #0
 8002a96:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002aba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fe86 	bl	80027e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b28:	f107 0308 	add.w	r3, r7, #8
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ff08 	bl	8002944 <ETH_SetDMAConfig>
}
 8002b34:	bf00      	nop
 8002b36:	3798      	adds	r7, #152	; 0x98
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3305      	adds	r3, #5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	3204      	adds	r2, #4
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <ETH_MACAddressConfig+0x68>)
 8002b5e:	4413      	add	r3, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	061a      	lsls	r2, r3, #24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3302      	adds	r3, #2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	4313      	orrs	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <ETH_MACAddressConfig+0x6c>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40028040 	.word	0x40028040
 8002ba8:	40028044 	.word	0x40028044

08002bac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e03e      	b.n	8002c38 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68d9      	ldr	r1, [r3, #12]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	3206      	adds	r2, #6
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d80c      	bhi.n	8002c1c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	e004      	b.n	8002c26 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d9bd      	bls.n	8002bba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c50:	611a      	str	r2, [r3, #16]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e046      	b.n	8002cfa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6919      	ldr	r1, [r3, #16]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ca8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002cb0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	3212      	adds	r2, #18
 8002cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d80c      	bhi.n	8002cea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6919      	ldr	r1, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	e004      	b.n	8002cf4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d9b5      	bls.n	8002c6c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2a:	60da      	str	r2, [r3, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e175      	b.n	8003044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f040 8164 	bne.w	800303e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d005      	beq.n	8002d8e <HAL_GPIO_Init+0x56>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d130      	bne.n	8002df0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	2203      	movs	r2, #3
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 0201 	and.w	r2, r3, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d017      	beq.n	8002e2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	2203      	movs	r2, #3
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d123      	bne.n	8002e80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	08da      	lsrs	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3208      	adds	r2, #8
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08da      	lsrs	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3208      	adds	r2, #8
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80be 	beq.w	800303e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_GPIO_Init+0x324>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4a65      	ldr	r2, [pc, #404]	; (800305c <HAL_GPIO_Init+0x324>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_GPIO_Init+0x324>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eda:	4a61      	ldr	r2, [pc, #388]	; (8003060 <HAL_GPIO_Init+0x328>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a58      	ldr	r2, [pc, #352]	; (8003064 <HAL_GPIO_Init+0x32c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d037      	beq.n	8002f76 <HAL_GPIO_Init+0x23e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_GPIO_Init+0x330>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_GPIO_Init+0x23a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a56      	ldr	r2, [pc, #344]	; (800306c <HAL_GPIO_Init+0x334>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <HAL_GPIO_Init+0x236>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a55      	ldr	r2, [pc, #340]	; (8003070 <HAL_GPIO_Init+0x338>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x232>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a54      	ldr	r2, [pc, #336]	; (8003074 <HAL_GPIO_Init+0x33c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x22e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a53      	ldr	r2, [pc, #332]	; (8003078 <HAL_GPIO_Init+0x340>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x22a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_GPIO_Init+0x344>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a51      	ldr	r2, [pc, #324]	; (8003080 <HAL_GPIO_Init+0x348>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a50      	ldr	r2, [pc, #320]	; (8003084 <HAL_GPIO_Init+0x34c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4f      	ldr	r2, [pc, #316]	; (8003088 <HAL_GPIO_Init+0x350>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f4e:	2309      	movs	r3, #9
 8002f50:	e012      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f52:	230a      	movs	r3, #10
 8002f54:	e010      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e00e      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e00c      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e00a      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e008      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e004      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_GPIO_Init+0x240>
 8002f76:	2300      	movs	r3, #0
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f002 0203 	and.w	r2, r2, #3
 8002f7e:	0092      	lsls	r2, r2, #2
 8002f80:	4093      	lsls	r3, r2
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f88:	4935      	ldr	r1, [pc, #212]	; (8003060 <HAL_GPIO_Init+0x328>)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	3302      	adds	r3, #2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_GPIO_Init+0x354>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fba:	4a34      	ldr	r2, [pc, #208]	; (800308c <HAL_GPIO_Init+0x354>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc0:	4b32      	ldr	r3, [pc, #200]	; (800308c <HAL_GPIO_Init+0x354>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe4:	4a29      	ldr	r2, [pc, #164]	; (800308c <HAL_GPIO_Init+0x354>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_GPIO_Init+0x354>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800300e:	4a1f      	ldr	r2, [pc, #124]	; (800308c <HAL_GPIO_Init+0x354>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_GPIO_Init+0x354>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_GPIO_Init+0x354>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	f67f ae86 	bls.w	8002d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40013800 	.word	0x40013800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40020800 	.word	0x40020800
 8003070:	40020c00 	.word	0x40020c00
 8003074:	40021000 	.word	0x40021000
 8003078:	40021400 	.word	0x40021400
 800307c:	40021800 	.word	0x40021800
 8003080:	40021c00 	.word	0x40021c00
 8003084:	40022000 	.word	0x40022000
 8003088:	40022400 	.word	0x40022400
 800308c:	40013c00 	.word	0x40013c00

08003090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
 800309c:	4613      	mov	r3, r2
 800309e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a0:	787b      	ldrb	r3, [r7, #1]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030ac:	e003      	b.n	80030b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030ae:	887b      	ldrh	r3, [r7, #2]
 80030b0:	041a      	lsls	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c4:	b08f      	sub	sp, #60	; 0x3c
 80030c6:	af0a      	add	r7, sp, #40	; 0x28
 80030c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e116      	b.n	8003302 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fee4 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f002 fd1c 	bl	8005b50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	687e      	ldr	r6, [r7, #4]
 8003120:	466d      	mov	r5, sp
 8003122:	f106 0410 	add.w	r4, r6, #16
 8003126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800312c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003132:	e885 0003 	stmia.w	r5, {r0, r1}
 8003136:	1d33      	adds	r3, r6, #4
 8003138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f002 fcb0 	bl	8005aa0 <USB_CoreInit>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0d7      	b.n	8003302 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fd0a 	bl	8005b72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	e04a      	b.n	80031fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	333d      	adds	r3, #61	; 0x3d
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	333c      	adds	r3, #60	; 0x3c
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	b298      	uxth	r0, r3
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3344      	adds	r3, #68	; 0x44
 80031a0:	4602      	mov	r2, r0
 80031a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3340      	adds	r3, #64	; 0x40
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3348      	adds	r3, #72	; 0x48
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	334c      	adds	r3, #76	; 0x4c
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3354      	adds	r3, #84	; 0x54
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	3301      	adds	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d3af      	bcc.n	8003164 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e044      	b.n	8003294 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003232:	7bfa      	ldrb	r2, [r7, #15]
 8003234:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	3301      	adds	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d3b5      	bcc.n	800320a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	687e      	ldr	r6, [r7, #4]
 80032a6:	466d      	mov	r5, sp
 80032a8:	f106 0410 	add.w	r4, r6, #16
 80032ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80032bc:	1d33      	adds	r3, r6, #4
 80032be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c0:	6838      	ldr	r0, [r7, #0]
 80032c2:	f002 fca3 	bl	8005c0c <USB_DevInit>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e014      	b.n	8003302 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f80b 	bl	800330c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fe61 	bl	8005fc2 <USB_DevDisconnect>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800330c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_PCDEx_ActivateLPM+0x44>)
 800333c:	4313      	orrs	r3, r2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	10000003 	.word	0x10000003

08003354 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40007000 	.word	0x40007000

08003374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e291      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8087 	beq.w	80034a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003398:	4b96      	ldr	r3, [pc, #600]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d00c      	beq.n	80033be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a4:	4b93      	ldr	r3, [pc, #588]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d112      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62>
 80033b0:	4b90      	ldr	r3, [pc, #576]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	4b8d      	ldr	r3, [pc, #564]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d06c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x130>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d168      	bne.n	80034a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e26b      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x7a>
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a83      	ldr	r2, [pc, #524]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e02e      	b.n	800344c <HAL_RCC_OscConfig+0xd8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x9c>
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7e      	ldr	r2, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b7c      	ldr	r3, [pc, #496]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7b      	ldr	r2, [pc, #492]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e01d      	b.n	800344c <HAL_RCC_OscConfig+0xd8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0xc0>
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a72      	ldr	r2, [pc, #456]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0xd8>
 8003434:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a6b      	ldr	r2, [pc, #428]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fd feb6 	bl	80011c4 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fd feb2 	bl	80011c4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e21f      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b61      	ldr	r3, [pc, #388]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fd fea2 	bl	80011c4 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fe9e 	bl	80011c4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e20b      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	4b57      	ldr	r3, [pc, #348]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x110>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d069      	beq.n	8003586 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b2:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d11c      	bne.n	8003504 <HAL_RCC_OscConfig+0x190>
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x17a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e1df      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	493d      	ldr	r1, [pc, #244]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	e040      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a38      	ldr	r2, [pc, #224]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fd fe54 	bl	80011c4 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fd fe50 	bl	80011c4 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1bd      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4929      	ldr	r1, [pc, #164]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
 8003552:	e018      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fd fe30 	bl	80011c4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003568:	f7fd fe2c 	bl	80011c4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e199      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d038      	beq.n	8003604 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d019      	beq.n	80035ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fe0d 	bl	80011c4 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fd fe09 	bl	80011c4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e176      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x23a>
 80035cc:	e01a      	b.n	8003604 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fd fdf3 	bl	80011c4 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fd fdef 	bl	80011c4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d903      	bls.n	80035f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e15c      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
 80035f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b91      	ldr	r3, [pc, #580]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ee      	bne.n	80035e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a4 	beq.w	800375a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10d      	bne.n	800363a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a87      	ldr	r2, [pc, #540]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b85      	ldr	r3, [pc, #532]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363a:	4b82      	ldr	r3, [pc, #520]	; (8003844 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d118      	bne.n	8003678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003646:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7e      	ldr	r2, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x4d0>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003652:	f7fd fdb7 	bl	80011c4 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365a:	f7fd fdb3 	bl	80011c4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b64      	cmp	r3, #100	; 0x64
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e120      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366c:	4b75      	ldr	r3, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x4d0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x31a>
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	e02d      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x33c>
 8003696:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a69      	ldr	r2, [pc, #420]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	4b67      	ldr	r3, [pc, #412]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a66      	ldr	r2, [pc, #408]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70
 80036ae:	e01c      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d10c      	bne.n	80036d2 <HAL_RCC_OscConfig+0x35e>
 80036b8:	4b61      	ldr	r3, [pc, #388]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a60      	ldr	r2, [pc, #384]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	4b5e      	ldr	r3, [pc, #376]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
 80036d2:	4b5b      	ldr	r3, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a5a      	ldr	r2, [pc, #360]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
 80036de:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d015      	beq.n	800371e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f2:	f7fd fd67 	bl	80011c4 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd fd63 	bl	80011c4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e0ce      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ee      	beq.n	80036fa <HAL_RCC_OscConfig+0x386>
 800371c:	e014      	b.n	8003748 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fd fd51 	bl	80011c4 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fd fd4d 	bl	80011c4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	; 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0b8      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ee      	bne.n	8003726 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374e:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a4 	beq.w	80038ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d06b      	beq.n	8003848 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d149      	bne.n	800380c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003778:	4b31      	ldr	r3, [pc, #196]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a30      	ldr	r2, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fd1e 	bl	80011c4 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd fd1a 	bl	80011c4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e087      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	3b01      	subs	r3, #1
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	061b      	lsls	r3, r3, #24
 80037ce:	4313      	orrs	r3, r2
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd fcee 	bl	80011c4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd fcea 	bl	80011c4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e057      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x478>
 800380a:	e04f      	b.n	80038ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fd fcd4 	bl	80011c4 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003820:	f7fd fcd0 	bl	80011c4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e03d      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x4ac>
 800383e:	e035      	b.n	80038ac <HAL_RCC_OscConfig+0x538>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x544>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d121      	bne.n	80038a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11a      	bne.n	80038a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0d0      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d910      	bls.n	8003904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 020f 	bic.w	r2, r3, #15
 80038ea:	4965      	ldr	r1, [pc, #404]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0b8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800391c:	4b59      	ldr	r3, [pc, #356]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003934:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 800393a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	494d      	ldr	r1, [pc, #308]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d040      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d115      	bne.n	800399e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e07f      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e073      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06b      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4936      	ldr	r1, [pc, #216]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd fc08 	bl	80011c4 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fd fc04 	bl	80011c4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e053      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b27      	ldr	r3, [pc, #156]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d210      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 020f 	bic.w	r2, r3, #15
 80039f6:	4922      	ldr	r1, [pc, #136]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e032      	b.n	8003a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4916      	ldr	r1, [pc, #88]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	490e      	ldr	r1, [pc, #56]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a4e:	f000 f821 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	490a      	ldr	r1, [pc, #40]	; (8003a88 <HAL_RCC_ClockConfig+0x1cc>)
 8003a60:	5ccb      	ldrb	r3, [r1, r3]
 8003a62:	fa22 f303 	lsr.w	r3, r2, r3
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1d0>)
 8003a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_ClockConfig+0x1d4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fb64 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08006a20 	.word	0x08006a20
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000004 	.word	0x20000004

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b094      	sub	sp, #80	; 0x50
 8003a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	f200 80e1 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac6:	e0db      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003acc:	e0db      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ace:	4b73      	ldr	r3, [pc, #460]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ad0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad2:	e0d8      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b6f      	ldr	r3, [pc, #444]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ade:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afc:	633b      	str	r3, [r7, #48]	; 0x30
 8003afe:	2300      	movs	r3, #0
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b06:	4622      	mov	r2, r4
 8003b08:	462b      	mov	r3, r5
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	0159      	lsls	r1, r3, #5
 8003b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b18:	0150      	lsls	r0, r2, #5
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4621      	mov	r1, r4
 8003b20:	1a51      	subs	r1, r2, r1
 8003b22:	6139      	str	r1, [r7, #16]
 8003b24:	4629      	mov	r1, r5
 8003b26:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b38:	4659      	mov	r1, fp
 8003b3a:	018b      	lsls	r3, r1, #6
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b42:	4651      	mov	r1, sl
 8003b44:	018a      	lsls	r2, r1, #6
 8003b46:	4651      	mov	r1, sl
 8003b48:	ebb2 0801 	subs.w	r8, r2, r1
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b66:	4690      	mov	r8, r2
 8003b68:	4699      	mov	r9, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	eb18 0303 	adds.w	r3, r8, r3
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	462b      	mov	r3, r5
 8003b74:	eb49 0303 	adc.w	r3, r9, r3
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b86:	4629      	mov	r1, r5
 8003b88:	024b      	lsls	r3, r1, #9
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b90:	4621      	mov	r1, r4
 8003b92:	024a      	lsls	r2, r1, #9
 8003b94:	4610      	mov	r0, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba4:	f7fc fb8c 	bl	80002c0 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	e058      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	f04f 0000 	mov.w	r0, #0
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	0159      	lsls	r1, r3, #5
 8003bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bde:	0150      	lsls	r0, r2, #5
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4641      	mov	r1, r8
 8003be6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bea:	4649      	mov	r1, r9
 8003bec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c04:	ebb2 040a 	subs.w	r4, r2, sl
 8003c08:	eb63 050b 	sbc.w	r5, r3, fp
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	00eb      	lsls	r3, r5, #3
 8003c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1a:	00e2      	lsls	r2, r4, #3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	464b      	mov	r3, r9
 8003c28:	eb45 0303 	adc.w	r3, r5, r3
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	028b      	lsls	r3, r1, #10
 8003c3e:	4621      	mov	r1, r4
 8003c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c44:	4621      	mov	r1, r4
 8003c46:	028a      	lsls	r2, r1, #10
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	61fa      	str	r2, [r7, #28]
 8003c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c58:	f7fc fb32 	bl	80002c0 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4613      	mov	r3, r2
 8003c62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3750      	adds	r7, #80	; 0x50
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000000 	.word	0x20000000

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0a9b      	lsrs	r3, r3, #10
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	08006a30 	.word	0x08006a30

08003ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ce4:	f7ff ffdc 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0b5b      	lsrs	r3, r3, #13
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08006a30 	.word	0x08006a30

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d30:	4b69      	ldr	r3, [pc, #420]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a68      	ldr	r2, [pc, #416]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d3a:	6093      	str	r3, [r2, #8]
 8003d3c:	4b66      	ldr	r3, [pc, #408]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	4964      	ldr	r1, [pc, #400]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d62:	4b5d      	ldr	r3, [pc, #372]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	4959      	ldr	r1, [pc, #356]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d80:	d101      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d82:	2301      	movs	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d9e:	4b4e      	ldr	r3, [pc, #312]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	494a      	ldr	r1, [pc, #296]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 808b 	beq.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	4a39      	ldr	r2, [pc, #228]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6413      	str	r3, [r2, #64]	; 0x40
 8003df8:	4b37      	ldr	r3, [pc, #220]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e04:	4b35      	ldr	r3, [pc, #212]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a34      	ldr	r2, [pc, #208]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fd f9d8 	bl	80011c4 <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7fd f9d4 	bl	80011c4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e357      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e36:	4b28      	ldr	r3, [pc, #160]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d035      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d02e      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e76:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d114      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd f99c 	bl	80011c4 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7fd f998 	bl	80011c4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e319      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ee      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebe:	d111      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ece:	400b      	ands	r3, r1
 8003ed0:	4901      	ldr	r1, [pc, #4]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	0ffffcff 	.word	0x0ffffcff
 8003ee4:	4baa      	ldr	r3, [pc, #680]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4aa9      	ldr	r2, [pc, #676]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	4ba7      	ldr	r3, [pc, #668]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	49a4      	ldr	r1, [pc, #656]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f0e:	4ba0      	ldr	r3, [pc, #640]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	4a9e      	ldr	r2, [pc, #632]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f1e:	4b9c      	ldr	r3, [pc, #624]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	4999      	ldr	r1, [pc, #612]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3c:	4b94      	ldr	r3, [pc, #592]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4a:	4991      	ldr	r1, [pc, #580]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5e:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6c:	4988      	ldr	r1, [pc, #544]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f80:	4b83      	ldr	r3, [pc, #524]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f8e:	4980      	ldr	r1, [pc, #512]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fa2:	4b7b      	ldr	r3, [pc, #492]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4977      	ldr	r1, [pc, #476]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc4:	4b72      	ldr	r3, [pc, #456]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f023 0203 	bic.w	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	496f      	ldr	r1, [pc, #444]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f023 020c 	bic.w	r2, r3, #12
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	4966      	ldr	r1, [pc, #408]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004008:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	495e      	ldr	r1, [pc, #376]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	4955      	ldr	r1, [pc, #340]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	494d      	ldr	r1, [pc, #308]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800406e:	4b48      	ldr	r3, [pc, #288]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	4944      	ldr	r1, [pc, #272]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004090:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409e:	493c      	ldr	r1, [pc, #240]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	4933      	ldr	r1, [pc, #204]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040d4:	4b2e      	ldr	r3, [pc, #184]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	492b      	ldr	r1, [pc, #172]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d011      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004104:	4922      	ldr	r1, [pc, #136]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004114:	d101      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004116:	2301      	movs	r3, #1
 8004118:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004144:	4912      	ldr	r1, [pc, #72]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004168:	4909      	ldr	r1, [pc, #36]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d006      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80d9 	beq.w	8004336 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004184:	4b02      	ldr	r3, [pc, #8]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a01      	ldr	r2, [pc, #4]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004190:	40023800 	.word	0x40023800
 8004194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004196:	f7fd f815 	bl	80011c4 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800419e:	f7fd f811 	bl	80011c4 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e194      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b0:	4b6c      	ldr	r3, [pc, #432]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d021      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d11d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041d0:	4b64      	ldr	r3, [pc, #400]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d6:	0c1b      	lsrs	r3, r3, #16
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041de:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e4:	0e1b      	lsrs	r3, r3, #24
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	019a      	lsls	r2, r3, #6
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	071b      	lsls	r3, r3, #28
 8004204:	4957      	ldr	r1, [pc, #348]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800422a:	2b00      	cmp	r3, #0
 800422c:	d02e      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004236:	d129      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004238:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	0c1b      	lsrs	r3, r3, #16
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004246:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424c:	0f1b      	lsrs	r3, r3, #28
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	019a      	lsls	r2, r3, #6
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	431a      	orrs	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	071b      	lsls	r3, r3, #28
 800426c:	493d      	ldr	r1, [pc, #244]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427a:	f023 021f 	bic.w	r2, r3, #31
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	3b01      	subs	r3, #1
 8004284:	4937      	ldr	r1, [pc, #220]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01d      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429e:	0e1b      	lsrs	r3, r3, #24
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042a6:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ac:	0f1b      	lsrs	r3, r3, #28
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	019a      	lsls	r2, r3, #6
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	061b      	lsls	r3, r3, #24
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	071b      	lsls	r3, r3, #28
 80042cc:	4925      	ldr	r1, [pc, #148]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d011      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	019a      	lsls	r2, r3, #6
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	071b      	lsls	r3, r3, #28
 80042fc:	4919      	ldr	r1, [pc, #100]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fc ff58 	bl	80011c4 <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004318:	f7fc ff54 	bl	80011c4 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0d7      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800432a:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	f040 80cd 	bne.w	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a08      	ldr	r2, [pc, #32]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fc ff3b 	bl	80011c4 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004350:	e00a      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004352:	f7fc ff37 	bl	80011c4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b64      	cmp	r3, #100	; 0x64
 800435e:	d903      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e0ba      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004364:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004368:	4b5e      	ldr	r3, [pc, #376]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004374:	d0ed      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004392:	2b00      	cmp	r3, #0
 8004394:	d02e      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d12a      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800439e:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043ac:	4b4d      	ldr	r3, [pc, #308]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	0f1b      	lsrs	r3, r3, #28
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	019a      	lsls	r2, r3, #6
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	4944      	ldr	r1, [pc, #272]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043da:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	3b01      	subs	r3, #1
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	493d      	ldr	r1, [pc, #244]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d022      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004408:	d11d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800440a:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	0e1b      	lsrs	r3, r3, #24
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004418:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	0f1b      	lsrs	r3, r3, #28
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	019a      	lsls	r2, r3, #6
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	041b      	lsls	r3, r3, #16
 8004432:	431a      	orrs	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	071b      	lsls	r3, r3, #28
 800443e:	4929      	ldr	r1, [pc, #164]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d028      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	0e1b      	lsrs	r3, r3, #24
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004460:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	0c1b      	lsrs	r3, r3, #16
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	019a      	lsls	r2, r3, #6
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	071b      	lsls	r3, r3, #28
 8004486:	4917      	ldr	r1, [pc, #92]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	4911      	ldr	r1, [pc, #68]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b0:	f7fc fe88 	bl	80011c4 <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044b8:	f7fc fe84 	bl	80011c4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e007      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d6:	d1ef      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800

080044e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e040      	b.n	800457c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc fc6e 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2224      	movs	r2, #36	; 0x24
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fbe6 	bl	8004cf8 <UART_SetConfig>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e022      	b.n	800457c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fe3e 	bl	80051c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fec5 	bl	8005304 <UART_CheckIdleState>
 800457a:	4603      	mov	r3, r0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004598:	2b20      	cmp	r3, #32
 800459a:	d171      	bne.n	8004680 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Transmit+0x24>
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e06a      	b.n	8004682 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2221      	movs	r2, #33	; 0x21
 80045b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ba:	f7fc fe03 	bl	80011c4 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d108      	bne.n	80045ec <HAL_UART_Transmit+0x68>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e003      	b.n	80045f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045f4:	e02c      	b.n	8004650 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 feb6 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e038      	b.n	8004682 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10b      	bne.n	800462e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3302      	adds	r3, #2
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e007      	b.n	800463e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	3301      	adds	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1cc      	bne.n	80045f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2200      	movs	r2, #0
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fe83 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e005      	b.n	8004682 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b08a      	sub	sp, #40	; 0x28
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	4613      	mov	r3, r2
 8004696:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d132      	bne.n	8004708 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_UART_Receive_IT+0x24>
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e02b      	b.n	800470a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	69f9      	ldr	r1, [r7, #28]
 80046ea:	6a3a      	ldr	r2, [r7, #32]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fefe 	bl	8005500 <UART_Start_Receive_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	e000      	b.n	800470a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3728      	adds	r7, #40	; 0x28
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b0ba      	sub	sp, #232	; 0xe8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800473a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800473e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004742:	4013      	ands	r3, r2
 8004744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d115      	bne.n	800477c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00f      	beq.n	800477c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8297 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
      }
      return;
 800477a:	e291      	b.n	8004ca0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800477c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8117 	beq.w	80049b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004796:	4b85      	ldr	r3, [pc, #532]	; (80049ac <HAL_UART_IRQHandler+0x298>)
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 810a 	beq.w	80049b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <HAL_UART_IRQHandler+0xbc>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d011      	beq.n	8004800 <HAL_UART_IRQHandler+0xec>
 80047dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2202      	movs	r2, #2
 80047ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d011      	beq.n	8004830 <HAL_UART_IRQHandler+0x11c>
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2204      	movs	r2, #4
 800481e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800483c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2208      	movs	r2, #8
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <HAL_UART_IRQHandler+0x18a>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00c      	beq.n	800489e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800488c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 81fd 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d04f      	beq.n	8004996 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fec8 	bl	800568c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	d141      	bne.n	800498e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800493a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800494e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1d9      	bne.n	800490a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	2b00      	cmp	r3, #0
 800495c:	d013      	beq.n	8004986 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_UART_IRQHandler+0x29c>)
 8004964:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fc32 	bl	80021d4 <HAL_DMA_Abort_IT>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004980:	4610      	mov	r0, r2
 8004982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e00f      	b.n	80049a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9a0 	bl	8004ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e00b      	b.n	80049a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f99c 	bl	8004ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e007      	b.n	80049a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f998 	bl	8004ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80049a4:	e17e      	b.n	8004ca4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a6:	bf00      	nop
    return;
 80049a8:	e17c      	b.n	8004ca4 <HAL_UART_IRQHandler+0x590>
 80049aa:	bf00      	nop
 80049ac:	04000120 	.word	0x04000120
 80049b0:	08005755 	.word	0x08005755

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 814c 	bne.w	8004c56 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8145 	beq.w	8004c56 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 813e 	beq.w	8004c56 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	f040 80b6 	bne.w	8004b5e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8150 	beq.w	8004ca8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a12:	429a      	cmp	r2, r3
 8004a14:	f080 8148 	bcs.w	8004ca8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	f000 8086 	beq.w	8004b3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1da      	bne.n	8004a30 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e1      	bne.n	8004a7a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3308      	adds	r3, #8
 8004abc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e3      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0c:	f023 0310 	bic.w	r3, r3, #16
 8004b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e4      	bne.n	8004afc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fadc 	bl	80020f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8c2 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b5c:	e0a4      	b.n	8004ca8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8096 	beq.w	8004cac <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8091 	beq.w	8004cac <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
 8004bae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e4      	bne.n	8004b8a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	623b      	str	r3, [r7, #32]
   return(result);
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004be4:	633a      	str	r2, [r7, #48]	; 0x30
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e3      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f023 0310 	bic.w	r3, r3, #16
 8004c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e4      	bne.n	8004c0c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f846 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c54:	e02a      	b.n	8004cac <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00e      	beq.n	8004c80 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01c      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
    }
    return;
 8004c7e:	e017      	b.n	8004cb0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d012      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fd71 	bl	8005780 <UART_EndTransmit_IT>
    return;
 8004c9e:	e008      	b.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8004ca0:	bf00      	nop
 8004ca2:	e006      	b.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
    return;
 8004ca4:	bf00      	nop
 8004ca6:	e004      	b.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8004ca8:	bf00      	nop
 8004caa:	e002      	b.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
      return;
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <HAL_UART_IRQHandler+0x59e>
    return;
 8004cb0:	bf00      	nop
  }

}
 8004cb2:	37e8      	adds	r7, #232	; 0xe8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4ba6      	ldr	r3, [pc, #664]	; (8004fbc <UART_SetConfig+0x2c4>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a94      	ldr	r2, [pc, #592]	; (8004fc0 <UART_SetConfig+0x2c8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d120      	bne.n	8004db6 <UART_SetConfig+0xbe>
 8004d74:	4b93      	ldr	r3, [pc, #588]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d816      	bhi.n	8004db0 <UART_SetConfig+0xb8>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <UART_SetConfig+0x90>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da5 	.word	0x08004da5
 8004d90:	08004d9f 	.word	0x08004d9f
 8004d94:	08004dab 	.word	0x08004dab
 8004d98:	2301      	movs	r3, #1
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e150      	b.n	8005040 <UART_SetConfig+0x348>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	77fb      	strb	r3, [r7, #31]
 8004da2:	e14d      	b.n	8005040 <UART_SetConfig+0x348>
 8004da4:	2304      	movs	r3, #4
 8004da6:	77fb      	strb	r3, [r7, #31]
 8004da8:	e14a      	b.n	8005040 <UART_SetConfig+0x348>
 8004daa:	2308      	movs	r3, #8
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e147      	b.n	8005040 <UART_SetConfig+0x348>
 8004db0:	2310      	movs	r3, #16
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e144      	b.n	8005040 <UART_SetConfig+0x348>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a83      	ldr	r2, [pc, #524]	; (8004fc8 <UART_SetConfig+0x2d0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d132      	bne.n	8004e26 <UART_SetConfig+0x12e>
 8004dc0:	4b80      	ldr	r3, [pc, #512]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d828      	bhi.n	8004e20 <UART_SetConfig+0x128>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0xdc>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e09 	.word	0x08004e09
 8004dd8:	08004e21 	.word	0x08004e21
 8004ddc:	08004e21 	.word	0x08004e21
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e15 	.word	0x08004e15
 8004de8:	08004e21 	.word	0x08004e21
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e21 	.word	0x08004e21
 8004df4:	08004e0f 	.word	0x08004e0f
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e1b 	.word	0x08004e1b
 8004e08:	2300      	movs	r3, #0
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e118      	b.n	8005040 <UART_SetConfig+0x348>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e115      	b.n	8005040 <UART_SetConfig+0x348>
 8004e14:	2304      	movs	r3, #4
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e112      	b.n	8005040 <UART_SetConfig+0x348>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e10f      	b.n	8005040 <UART_SetConfig+0x348>
 8004e20:	2310      	movs	r3, #16
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e10c      	b.n	8005040 <UART_SetConfig+0x348>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a68      	ldr	r2, [pc, #416]	; (8004fcc <UART_SetConfig+0x2d4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d120      	bne.n	8004e72 <UART_SetConfig+0x17a>
 8004e30:	4b64      	ldr	r3, [pc, #400]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e3a:	2b30      	cmp	r3, #48	; 0x30
 8004e3c:	d013      	beq.n	8004e66 <UART_SetConfig+0x16e>
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d814      	bhi.n	8004e6c <UART_SetConfig+0x174>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d009      	beq.n	8004e5a <UART_SetConfig+0x162>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d810      	bhi.n	8004e6c <UART_SetConfig+0x174>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <UART_SetConfig+0x15c>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d006      	beq.n	8004e60 <UART_SetConfig+0x168>
 8004e52:	e00b      	b.n	8004e6c <UART_SetConfig+0x174>
 8004e54:	2300      	movs	r3, #0
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e0f2      	b.n	8005040 <UART_SetConfig+0x348>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e0ef      	b.n	8005040 <UART_SetConfig+0x348>
 8004e60:	2304      	movs	r3, #4
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e0ec      	b.n	8005040 <UART_SetConfig+0x348>
 8004e66:	2308      	movs	r3, #8
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e0e9      	b.n	8005040 <UART_SetConfig+0x348>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e0e6      	b.n	8005040 <UART_SetConfig+0x348>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a56      	ldr	r2, [pc, #344]	; (8004fd0 <UART_SetConfig+0x2d8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d120      	bne.n	8004ebe <UART_SetConfig+0x1c6>
 8004e7c:	4b51      	ldr	r3, [pc, #324]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e86:	2bc0      	cmp	r3, #192	; 0xc0
 8004e88:	d013      	beq.n	8004eb2 <UART_SetConfig+0x1ba>
 8004e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e8c:	d814      	bhi.n	8004eb8 <UART_SetConfig+0x1c0>
 8004e8e:	2b80      	cmp	r3, #128	; 0x80
 8004e90:	d009      	beq.n	8004ea6 <UART_SetConfig+0x1ae>
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d810      	bhi.n	8004eb8 <UART_SetConfig+0x1c0>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <UART_SetConfig+0x1a8>
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d006      	beq.n	8004eac <UART_SetConfig+0x1b4>
 8004e9e:	e00b      	b.n	8004eb8 <UART_SetConfig+0x1c0>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e0cc      	b.n	8005040 <UART_SetConfig+0x348>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e0c9      	b.n	8005040 <UART_SetConfig+0x348>
 8004eac:	2304      	movs	r3, #4
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e0c6      	b.n	8005040 <UART_SetConfig+0x348>
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e0c3      	b.n	8005040 <UART_SetConfig+0x348>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e0c0      	b.n	8005040 <UART_SetConfig+0x348>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a44      	ldr	r2, [pc, #272]	; (8004fd4 <UART_SetConfig+0x2dc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d125      	bne.n	8004f14 <UART_SetConfig+0x21c>
 8004ec8:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed6:	d017      	beq.n	8004f08 <UART_SetConfig+0x210>
 8004ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004edc:	d817      	bhi.n	8004f0e <UART_SetConfig+0x216>
 8004ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee2:	d00b      	beq.n	8004efc <UART_SetConfig+0x204>
 8004ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee8:	d811      	bhi.n	8004f0e <UART_SetConfig+0x216>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <UART_SetConfig+0x1fe>
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d006      	beq.n	8004f02 <UART_SetConfig+0x20a>
 8004ef4:	e00b      	b.n	8004f0e <UART_SetConfig+0x216>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e0a1      	b.n	8005040 <UART_SetConfig+0x348>
 8004efc:	2302      	movs	r3, #2
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e09e      	b.n	8005040 <UART_SetConfig+0x348>
 8004f02:	2304      	movs	r3, #4
 8004f04:	77fb      	strb	r3, [r7, #31]
 8004f06:	e09b      	b.n	8005040 <UART_SetConfig+0x348>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e098      	b.n	8005040 <UART_SetConfig+0x348>
 8004f0e:	2310      	movs	r3, #16
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e095      	b.n	8005040 <UART_SetConfig+0x348>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2f      	ldr	r2, [pc, #188]	; (8004fd8 <UART_SetConfig+0x2e0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d125      	bne.n	8004f6a <UART_SetConfig+0x272>
 8004f1e:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f2c:	d017      	beq.n	8004f5e <UART_SetConfig+0x266>
 8004f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f32:	d817      	bhi.n	8004f64 <UART_SetConfig+0x26c>
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f38:	d00b      	beq.n	8004f52 <UART_SetConfig+0x25a>
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d811      	bhi.n	8004f64 <UART_SetConfig+0x26c>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <UART_SetConfig+0x254>
 8004f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f48:	d006      	beq.n	8004f58 <UART_SetConfig+0x260>
 8004f4a:	e00b      	b.n	8004f64 <UART_SetConfig+0x26c>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	77fb      	strb	r3, [r7, #31]
 8004f50:	e076      	b.n	8005040 <UART_SetConfig+0x348>
 8004f52:	2302      	movs	r3, #2
 8004f54:	77fb      	strb	r3, [r7, #31]
 8004f56:	e073      	b.n	8005040 <UART_SetConfig+0x348>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	77fb      	strb	r3, [r7, #31]
 8004f5c:	e070      	b.n	8005040 <UART_SetConfig+0x348>
 8004f5e:	2308      	movs	r3, #8
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	e06d      	b.n	8005040 <UART_SetConfig+0x348>
 8004f64:	2310      	movs	r3, #16
 8004f66:	77fb      	strb	r3, [r7, #31]
 8004f68:	e06a      	b.n	8005040 <UART_SetConfig+0x348>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <UART_SetConfig+0x2e4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d138      	bne.n	8004fe6 <UART_SetConfig+0x2ee>
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <UART_SetConfig+0x2cc>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f82:	d017      	beq.n	8004fb4 <UART_SetConfig+0x2bc>
 8004f84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f88:	d82a      	bhi.n	8004fe0 <UART_SetConfig+0x2e8>
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d00b      	beq.n	8004fa8 <UART_SetConfig+0x2b0>
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	d824      	bhi.n	8004fe0 <UART_SetConfig+0x2e8>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <UART_SetConfig+0x2aa>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	d006      	beq.n	8004fae <UART_SetConfig+0x2b6>
 8004fa0:	e01e      	b.n	8004fe0 <UART_SetConfig+0x2e8>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e04b      	b.n	8005040 <UART_SetConfig+0x348>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e048      	b.n	8005040 <UART_SetConfig+0x348>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e045      	b.n	8005040 <UART_SetConfig+0x348>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e042      	b.n	8005040 <UART_SetConfig+0x348>
 8004fba:	bf00      	nop
 8004fbc:	efff69f3 	.word	0xefff69f3
 8004fc0:	40011000 	.word	0x40011000
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	40004800 	.word	0x40004800
 8004fd0:	40004c00 	.word	0x40004c00
 8004fd4:	40005000 	.word	0x40005000
 8004fd8:	40011400 	.word	0x40011400
 8004fdc:	40007800 	.word	0x40007800
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e02c      	b.n	8005040 <UART_SetConfig+0x348>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a72      	ldr	r2, [pc, #456]	; (80051b4 <UART_SetConfig+0x4bc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d125      	bne.n	800503c <UART_SetConfig+0x344>
 8004ff0:	4b71      	ldr	r3, [pc, #452]	; (80051b8 <UART_SetConfig+0x4c0>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ffa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ffe:	d017      	beq.n	8005030 <UART_SetConfig+0x338>
 8005000:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005004:	d817      	bhi.n	8005036 <UART_SetConfig+0x33e>
 8005006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500a:	d00b      	beq.n	8005024 <UART_SetConfig+0x32c>
 800500c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005010:	d811      	bhi.n	8005036 <UART_SetConfig+0x33e>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <UART_SetConfig+0x326>
 8005016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501a:	d006      	beq.n	800502a <UART_SetConfig+0x332>
 800501c:	e00b      	b.n	8005036 <UART_SetConfig+0x33e>
 800501e:	2300      	movs	r3, #0
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e00d      	b.n	8005040 <UART_SetConfig+0x348>
 8005024:	2302      	movs	r3, #2
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e00a      	b.n	8005040 <UART_SetConfig+0x348>
 800502a:	2304      	movs	r3, #4
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e007      	b.n	8005040 <UART_SetConfig+0x348>
 8005030:	2308      	movs	r3, #8
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e004      	b.n	8005040 <UART_SetConfig+0x348>
 8005036:	2310      	movs	r3, #16
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e001      	b.n	8005040 <UART_SetConfig+0x348>
 800503c:	2310      	movs	r3, #16
 800503e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d15b      	bne.n	8005102 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800504a:	7ffb      	ldrb	r3, [r7, #31]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d828      	bhi.n	80050a2 <UART_SetConfig+0x3aa>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x360>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe fe1c 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8005080:	61b8      	str	r0, [r7, #24]
        break;
 8005082:	e013      	b.n	80050ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe fe2c 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 8005088:	61b8      	str	r0, [r7, #24]
        break;
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <UART_SetConfig+0x4c4>)
 800508e:	61bb      	str	r3, [r7, #24]
        break;
 8005090:	e00c      	b.n	80050ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe fcff 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8005096:	61b8      	str	r0, [r7, #24]
        break;
 8005098:	e008      	b.n	80050ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	61bb      	str	r3, [r7, #24]
        break;
 80050a0:	e004      	b.n	80050ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	77bb      	strb	r3, [r7, #30]
        break;
 80050aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d074      	beq.n	800519c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	005a      	lsls	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d916      	bls.n	80050fc <UART_SetConfig+0x404>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d212      	bcs.n	80050fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f023 030f 	bic.w	r3, r3, #15
 80050de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	89fb      	ldrh	r3, [r7, #14]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	89fa      	ldrh	r2, [r7, #14]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	e04f      	b.n	800519c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	77bb      	strb	r3, [r7, #30]
 8005100:	e04c      	b.n	800519c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005102:	7ffb      	ldrb	r3, [r7, #31]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d828      	bhi.n	800515a <UART_SetConfig+0x462>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x418>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fdc0 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8005138:	61b8      	str	r0, [r7, #24]
        break;
 800513a:	e013      	b.n	8005164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fe fdd0 	bl	8003ce0 <HAL_RCC_GetPCLK2Freq>
 8005140:	61b8      	str	r0, [r7, #24]
        break;
 8005142:	e00f      	b.n	8005164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <UART_SetConfig+0x4c4>)
 8005146:	61bb      	str	r3, [r7, #24]
        break;
 8005148:	e00c      	b.n	8005164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7fe fca3 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 800514e:	61b8      	str	r0, [r7, #24]
        break;
 8005150:	e008      	b.n	8005164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005156:	61bb      	str	r3, [r7, #24]
        break;
 8005158:	e004      	b.n	8005164 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	77bb      	strb	r3, [r7, #30]
        break;
 8005162:	bf00      	nop
    }

    if (pclk != 0U)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	085a      	lsrs	r2, r3, #1
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b0f      	cmp	r3, #15
 8005182:	d909      	bls.n	8005198 <UART_SetConfig+0x4a0>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d205      	bcs.n	8005198 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40007c00 	.word	0x40007c00
 80051b8:	40023800 	.word	0x40023800
 80051bc:	00f42400 	.word	0x00f42400

080051c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052be:	d10a      	bne.n	80052d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af02      	add	r7, sp, #8
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005314:	f7fb ff56 	bl	80011c4 <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d10e      	bne.n	8005346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f81b 	bl	8005372 <UART_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e011      	b.n	800536a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b09c      	sub	sp, #112	; 0x70
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005382:	e0a7      	b.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538a:	f000 80a3 	beq.w	80054d4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fb ff19 	bl	80011c4 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800539e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d13f      	bne.n	8005424 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053b8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e6      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	663b      	str	r3, [r7, #96]	; 0x60
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3308      	adds	r3, #8
 80053f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e068      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d050      	beq.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005440:	d148      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
 800546c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e6      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3308      	adds	r3, #8
 8005484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	613b      	str	r3, [r7, #16]
   return(result);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	66bb      	str	r3, [r7, #104]	; 0x68
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3308      	adds	r3, #8
 800549c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800549e:	623a      	str	r2, [r7, #32]
 80054a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e5      	bne.n	800547e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e010      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4013      	ands	r3, r2
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	f43f af48 	beq.w	8005384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3770      	adds	r7, #112	; 0x70
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005500:	b480      	push	{r7}
 8005502:	b097      	sub	sp, #92	; 0x5c
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005532:	d10e      	bne.n	8005552 <UART_Start_Receive_IT+0x52>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <UART_Start_Receive_IT+0x48>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005546:	e02d      	b.n	80055a4 <UART_Start_Receive_IT+0xa4>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	22ff      	movs	r2, #255	; 0xff
 800554c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005550:	e028      	b.n	80055a4 <UART_Start_Receive_IT+0xa4>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <UART_Start_Receive_IT+0x76>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <UART_Start_Receive_IT+0x6c>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	22ff      	movs	r2, #255	; 0xff
 8005566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800556a:	e01b      	b.n	80055a4 <UART_Start_Receive_IT+0xa4>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	227f      	movs	r2, #127	; 0x7f
 8005570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005574:	e016      	b.n	80055a4 <UART_Start_Receive_IT+0xa4>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557e:	d10d      	bne.n	800559c <UART_Start_Receive_IT+0x9c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <UART_Start_Receive_IT+0x92>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	227f      	movs	r2, #127	; 0x7f
 800558c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005590:	e008      	b.n	80055a4 <UART_Start_Receive_IT+0xa4>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	223f      	movs	r2, #63	; 0x3f
 8005596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800559a:	e003      	b.n	80055a4 <UART_Start_Receive_IT+0xa4>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2222      	movs	r2, #34	; 0x22
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f043 0301 	orr.w	r3, r3, #1
 80055ca:	657b      	str	r3, [r7, #84]	; 0x54
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80055d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e5      	bne.n	80055b4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f0:	d107      	bne.n	8005602 <UART_Start_Receive_IT+0x102>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <UART_Start_Receive_IT+0x184>)
 80055fe:	669a      	str	r2, [r3, #104]	; 0x68
 8005600:	e002      	b.n	8005608 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a20      	ldr	r2, [pc, #128]	; (8005688 <UART_Start_Receive_IT+0x188>)
 8005606:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d019      	beq.n	8005644 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
 8005630:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e6      	bne.n	8005610 <UART_Start_Receive_IT+0x110>
 8005642:	e018      	b.n	8005676 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	613b      	str	r3, [r7, #16]
   return(result);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f043 0320 	orr.w	r3, r3, #32
 8005658:	653b      	str	r3, [r7, #80]	; 0x50
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005662:	623b      	str	r3, [r7, #32]
 8005664:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	69f9      	ldr	r1, [r7, #28]
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	375c      	adds	r7, #92	; 0x5c
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	0800593b 	.word	0x0800593b
 8005688:	080057d5 	.word	0x080057d5

0800568c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b095      	sub	sp, #84	; 0x54
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b2:	643b      	str	r3, [r7, #64]	; 0x40
 80056b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e6      	bne.n	8005694 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e5      	bne.n	80056c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d118      	bne.n	8005734 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0310 	bic.w	r3, r3, #16
 8005716:	647b      	str	r3, [r7, #68]	; 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6979      	ldr	r1, [r7, #20]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	613b      	str	r3, [r7, #16]
   return(result);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e6      	bne.n	8005702 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005748:	bf00      	nop
 800574a:	3754      	adds	r7, #84	; 0x54
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff faaa 	bl	8004ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	60bb      	str	r3, [r7, #8]
   return(result);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6979      	ldr	r1, [r7, #20]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	613b      	str	r3, [r7, #16]
   return(result);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e6      	bne.n	8005788 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fa76 	bl	8004cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057cc:	bf00      	nop
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b096      	sub	sp, #88	; 0x58
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ec:	2b22      	cmp	r3, #34	; 0x22
 80057ee:	f040 8098 	bne.w	8005922 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057fc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005800:	b2d9      	uxtb	r1, r3
 8005802:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005806:	b2da      	uxtb	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	400a      	ands	r2, r1
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d17b      	bne.n	8005932 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800584e:	653b      	str	r3, [r7, #80]	; 0x50
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	647b      	str	r3, [r7, #68]	; 0x44
 800585a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800585e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e6      	bne.n	800583a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3308      	adds	r3, #8
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	623b      	str	r3, [r7, #32]
   return(result);
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800588c:	633a      	str	r2, [r7, #48]	; 0x30
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e5      	bne.n	800586c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d12e      	bne.n	800591a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0310 	bic.w	r3, r3, #16
 80058d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	617b      	str	r3, [r7, #20]
   return(result);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e6      	bne.n	80058c2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d103      	bne.n	800590a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2210      	movs	r2, #16
 8005908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff f9e4 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005918:	e00b      	b.n	8005932 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fb f8f6 	bl	8000b0c <HAL_UART_RxCpltCallback>
}
 8005920:	e007      	b.n	8005932 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	619a      	str	r2, [r3, #24]
}
 8005932:	bf00      	nop
 8005934:	3758      	adds	r7, #88	; 0x58
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b096      	sub	sp, #88	; 0x58
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005948:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005952:	2b22      	cmp	r3, #34	; 0x22
 8005954:	f040 8098 	bne.w	8005a88 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005968:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800596c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005970:	4013      	ands	r3, r2
 8005972:	b29a      	uxth	r2, r3
 8005974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005976:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597c:	1c9a      	adds	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d17b      	bne.n	8005a98 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059be:	643b      	str	r3, [r7, #64]	; 0x40
 80059c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e6      	bne.n	80059a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3308      	adds	r3, #8
 80059f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e5      	bne.n	80059d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d12e      	bne.n	8005a80 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f023 0310 	bic.w	r3, r3, #16
 8005a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6979      	ldr	r1, [r7, #20]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	613b      	str	r3, [r7, #16]
   return(result);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e6      	bne.n	8005a28 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d103      	bne.n	8005a70 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff f931 	bl	8004ce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a7e:	e00b      	b.n	8005a98 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fb f843 	bl	8000b0c <HAL_UART_RxCpltCallback>
}
 8005a86:	e007      	b.n	8005a98 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0208 	orr.w	r2, r2, #8
 8005a96:	619a      	str	r2, [r3, #24]
}
 8005a98:	bf00      	nop
 8005a9a:	3758      	adds	r7, #88	; 0x58
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	f107 001c 	add.w	r0, r7, #28
 8005aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d120      	bne.n	8005afa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	4b20      	ldr	r3, [pc, #128]	; (8005b4c <USB_CoreInit+0xac>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d105      	bne.n	8005aee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa96 	bl	8006020 <USB_CoreReset>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
 8005af8:	e010      	b.n	8005b1c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa8a 	bl	8006020 <USB_CoreReset>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d10b      	bne.n	8005b3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f043 0206 	orr.w	r2, r3, #6
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b46:	b004      	add	sp, #16
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	ffbdffbf 	.word	0xffbdffbf

08005b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 0201 	bic.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d115      	bne.n	8005bc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f7fb fb1b 	bl	80011dc <HAL_Delay>
      ms++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fa29 	bl	8006004 <USB_GetMode>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d01e      	beq.n	8005bf6 <USB_SetCurrentMode+0x84>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b31      	cmp	r3, #49	; 0x31
 8005bbc:	d9f0      	bls.n	8005ba0 <USB_SetCurrentMode+0x2e>
 8005bbe:	e01a      	b.n	8005bf6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d115      	bne.n	8005bf2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f7fb fb02 	bl	80011dc <HAL_Delay>
      ms++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa10 	bl	8006004 <USB_GetMode>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <USB_SetCurrentMode+0x84>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b31      	cmp	r3, #49	; 0x31
 8005bee:	d9f0      	bls.n	8005bd2 <USB_SetCurrentMode+0x60>
 8005bf0:	e001      	b.n	8005bf6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e005      	b.n	8005c02 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b32      	cmp	r3, #50	; 0x32
 8005bfa:	d101      	bne.n	8005c00 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b086      	sub	sp, #24
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e009      	b.n	8005c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3340      	adds	r3, #64	; 0x40
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b0e      	cmp	r3, #14
 8005c44:	d9f2      	bls.n	8005c2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11c      	bne.n	8005c86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5a:	f043 0302 	orr.w	r3, r3, #2
 8005c5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e005      	b.n	8005c92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	461a      	mov	r2, r3
 8005cae:	680b      	ldr	r3, [r1, #0]
 8005cb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10c      	bne.n	8005cd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f965 	bl	8005f90 <USB_SetDevSpeed>
 8005cc6:	e008      	b.n	8005cda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cc8:	2101      	movs	r1, #1
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f960 	bl	8005f90 <USB_SetDevSpeed>
 8005cd0:	e003      	b.n	8005cda <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cd2:	2103      	movs	r1, #3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f95b 	bl	8005f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cda:	2110      	movs	r1, #16
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f8f3 	bl	8005ec8 <USB_FlushTxFifo>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f91f 	bl	8005f30 <USB_FlushRxFifo>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	e043      	b.n	8005dae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3c:	d118      	bne.n	8005d70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	461a      	mov	r2, r3
 8005d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e013      	b.n	8005d82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	461a      	mov	r2, r3
 8005d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e008      	b.n	8005d82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	461a      	mov	r2, r3
 8005da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3301      	adds	r3, #1
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3b7      	bcc.n	8005d26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e043      	b.n	8005e44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd2:	d118      	bne.n	8005e06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	461a      	mov	r2, r3
 8005de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e013      	b.n	8005e18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e008      	b.n	8005e18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	461a      	mov	r2, r3
 8005e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3301      	adds	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d3b7      	bcc.n	8005dbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f043 0210 	orr.w	r2, r3, #16
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	4b0e      	ldr	r3, [pc, #56]	; (8005ec0 <USB_DevInit+0x2b4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f043 0208 	orr.w	r2, r3, #8
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d105      	bne.n	8005eb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699a      	ldr	r2, [r3, #24]
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <USB_DevInit+0x2b8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ebc:	b004      	add	sp, #16
 8005ebe:	4770      	bx	lr
 8005ec0:	803c3800 	.word	0x803c3800
 8005ec4:	40000004 	.word	0x40000004

08005ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <USB_FlushTxFifo+0x64>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d901      	bls.n	8005ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e01b      	b.n	8005f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	daf2      	bge.n	8005ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	019b      	lsls	r3, r3, #6
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <USB_FlushTxFifo+0x64>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e006      	b.n	8005f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d0f0      	beq.n	8005f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00030d40 	.word	0x00030d40

08005f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a11      	ldr	r2, [pc, #68]	; (8005f8c <USB_FlushRxFifo+0x5c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e018      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	daf2      	bge.n	8005f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <USB_FlushRxFifo+0x5c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d901      	bls.n	8005f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e006      	b.n	8005f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d0f0      	beq.n	8005f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	00030d40 	.word	0x00030d40

08005f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fdc:	f023 0303 	bic.w	r3, r3, #3
 8005fe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff0:	f043 0302 	orr.w	r3, r3, #2
 8005ff4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0301 	and.w	r3, r3, #1
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <USB_CoreReset+0x64>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e01b      	b.n	8006076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	daf2      	bge.n	800602c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f043 0201 	orr.w	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3301      	adds	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a09      	ldr	r2, [pc, #36]	; (8006084 <USB_CoreReset+0x64>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e006      	b.n	8006076 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b01      	cmp	r3, #1
 8006072:	d0f0      	beq.n	8006056 <USB_CoreReset+0x36>

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	00030d40 	.word	0x00030d40

08006088 <siprintf>:
 8006088:	b40e      	push	{r1, r2, r3}
 800608a:	b500      	push	{lr}
 800608c:	b09c      	sub	sp, #112	; 0x70
 800608e:	ab1d      	add	r3, sp, #116	; 0x74
 8006090:	9002      	str	r0, [sp, #8]
 8006092:	9006      	str	r0, [sp, #24]
 8006094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006098:	4809      	ldr	r0, [pc, #36]	; (80060c0 <siprintf+0x38>)
 800609a:	9107      	str	r1, [sp, #28]
 800609c:	9104      	str	r1, [sp, #16]
 800609e:	4909      	ldr	r1, [pc, #36]	; (80060c4 <siprintf+0x3c>)
 80060a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a4:	9105      	str	r1, [sp, #20]
 80060a6:	6800      	ldr	r0, [r0, #0]
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	a902      	add	r1, sp, #8
 80060ac:	f000 f992 	bl	80063d4 <_svfiprintf_r>
 80060b0:	9b02      	ldr	r3, [sp, #8]
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	b01c      	add	sp, #112	; 0x70
 80060b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060bc:	b003      	add	sp, #12
 80060be:	4770      	bx	lr
 80060c0:	20000058 	.word	0x20000058
 80060c4:	ffff0208 	.word	0xffff0208

080060c8 <memset>:
 80060c8:	4402      	add	r2, r0
 80060ca:	4603      	mov	r3, r0
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d100      	bne.n	80060d2 <memset+0xa>
 80060d0:	4770      	bx	lr
 80060d2:	f803 1b01 	strb.w	r1, [r3], #1
 80060d6:	e7f9      	b.n	80060cc <memset+0x4>

080060d8 <__errno>:
 80060d8:	4b01      	ldr	r3, [pc, #4]	; (80060e0 <__errno+0x8>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000058 	.word	0x20000058

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	; (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	; (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	; (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	; (8006128 <__libc_init_array+0x44>)
 80060f8:	f000 fc6a 	bl	80069d0 <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	08006a7c 	.word	0x08006a7c
 8006120:	08006a7c 	.word	0x08006a7c
 8006124:	08006a7c 	.word	0x08006a7c
 8006128:	08006a80 	.word	0x08006a80

0800612c <__retarget_lock_acquire_recursive>:
 800612c:	4770      	bx	lr

0800612e <__retarget_lock_release_recursive>:
 800612e:	4770      	bx	lr

08006130 <_free_r>:
 8006130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006132:	2900      	cmp	r1, #0
 8006134:	d044      	beq.n	80061c0 <_free_r+0x90>
 8006136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613a:	9001      	str	r0, [sp, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f1a1 0404 	sub.w	r4, r1, #4
 8006142:	bfb8      	it	lt
 8006144:	18e4      	addlt	r4, r4, r3
 8006146:	f000 f8df 	bl	8006308 <__malloc_lock>
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <_free_r+0x94>)
 800614c:	9801      	ldr	r0, [sp, #4]
 800614e:	6813      	ldr	r3, [r2, #0]
 8006150:	b933      	cbnz	r3, 8006160 <_free_r+0x30>
 8006152:	6063      	str	r3, [r4, #4]
 8006154:	6014      	str	r4, [r2, #0]
 8006156:	b003      	add	sp, #12
 8006158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800615c:	f000 b8da 	b.w	8006314 <__malloc_unlock>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d908      	bls.n	8006176 <_free_r+0x46>
 8006164:	6825      	ldr	r5, [r4, #0]
 8006166:	1961      	adds	r1, r4, r5
 8006168:	428b      	cmp	r3, r1
 800616a:	bf01      	itttt	eq
 800616c:	6819      	ldreq	r1, [r3, #0]
 800616e:	685b      	ldreq	r3, [r3, #4]
 8006170:	1949      	addeq	r1, r1, r5
 8006172:	6021      	streq	r1, [r4, #0]
 8006174:	e7ed      	b.n	8006152 <_free_r+0x22>
 8006176:	461a      	mov	r2, r3
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	b10b      	cbz	r3, 8006180 <_free_r+0x50>
 800617c:	42a3      	cmp	r3, r4
 800617e:	d9fa      	bls.n	8006176 <_free_r+0x46>
 8006180:	6811      	ldr	r1, [r2, #0]
 8006182:	1855      	adds	r5, r2, r1
 8006184:	42a5      	cmp	r5, r4
 8006186:	d10b      	bne.n	80061a0 <_free_r+0x70>
 8006188:	6824      	ldr	r4, [r4, #0]
 800618a:	4421      	add	r1, r4
 800618c:	1854      	adds	r4, r2, r1
 800618e:	42a3      	cmp	r3, r4
 8006190:	6011      	str	r1, [r2, #0]
 8006192:	d1e0      	bne.n	8006156 <_free_r+0x26>
 8006194:	681c      	ldr	r4, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	6053      	str	r3, [r2, #4]
 800619a:	440c      	add	r4, r1
 800619c:	6014      	str	r4, [r2, #0]
 800619e:	e7da      	b.n	8006156 <_free_r+0x26>
 80061a0:	d902      	bls.n	80061a8 <_free_r+0x78>
 80061a2:	230c      	movs	r3, #12
 80061a4:	6003      	str	r3, [r0, #0]
 80061a6:	e7d6      	b.n	8006156 <_free_r+0x26>
 80061a8:	6825      	ldr	r5, [r4, #0]
 80061aa:	1961      	adds	r1, r4, r5
 80061ac:	428b      	cmp	r3, r1
 80061ae:	bf04      	itt	eq
 80061b0:	6819      	ldreq	r1, [r3, #0]
 80061b2:	685b      	ldreq	r3, [r3, #4]
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	bf04      	itt	eq
 80061b8:	1949      	addeq	r1, r1, r5
 80061ba:	6021      	streq	r1, [r4, #0]
 80061bc:	6054      	str	r4, [r2, #4]
 80061be:	e7ca      	b.n	8006156 <_free_r+0x26>
 80061c0:	b003      	add	sp, #12
 80061c2:	bd30      	pop	{r4, r5, pc}
 80061c4:	20000aac 	.word	0x20000aac

080061c8 <sbrk_aligned>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4e0e      	ldr	r6, [pc, #56]	; (8006204 <sbrk_aligned+0x3c>)
 80061cc:	460c      	mov	r4, r1
 80061ce:	6831      	ldr	r1, [r6, #0]
 80061d0:	4605      	mov	r5, r0
 80061d2:	b911      	cbnz	r1, 80061da <sbrk_aligned+0x12>
 80061d4:	f000 fba6 	bl	8006924 <_sbrk_r>
 80061d8:	6030      	str	r0, [r6, #0]
 80061da:	4621      	mov	r1, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 fba1 	bl	8006924 <_sbrk_r>
 80061e2:	1c43      	adds	r3, r0, #1
 80061e4:	d00a      	beq.n	80061fc <sbrk_aligned+0x34>
 80061e6:	1cc4      	adds	r4, r0, #3
 80061e8:	f024 0403 	bic.w	r4, r4, #3
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d007      	beq.n	8006200 <sbrk_aligned+0x38>
 80061f0:	1a21      	subs	r1, r4, r0
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 fb96 	bl	8006924 <_sbrk_r>
 80061f8:	3001      	adds	r0, #1
 80061fa:	d101      	bne.n	8006200 <sbrk_aligned+0x38>
 80061fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006200:	4620      	mov	r0, r4
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	20000ab0 	.word	0x20000ab0

08006208 <_malloc_r>:
 8006208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800620c:	1ccd      	adds	r5, r1, #3
 800620e:	f025 0503 	bic.w	r5, r5, #3
 8006212:	3508      	adds	r5, #8
 8006214:	2d0c      	cmp	r5, #12
 8006216:	bf38      	it	cc
 8006218:	250c      	movcc	r5, #12
 800621a:	2d00      	cmp	r5, #0
 800621c:	4607      	mov	r7, r0
 800621e:	db01      	blt.n	8006224 <_malloc_r+0x1c>
 8006220:	42a9      	cmp	r1, r5
 8006222:	d905      	bls.n	8006230 <_malloc_r+0x28>
 8006224:	230c      	movs	r3, #12
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	2600      	movs	r6, #0
 800622a:	4630      	mov	r0, r6
 800622c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006304 <_malloc_r+0xfc>
 8006234:	f000 f868 	bl	8006308 <__malloc_lock>
 8006238:	f8d8 3000 	ldr.w	r3, [r8]
 800623c:	461c      	mov	r4, r3
 800623e:	bb5c      	cbnz	r4, 8006298 <_malloc_r+0x90>
 8006240:	4629      	mov	r1, r5
 8006242:	4638      	mov	r0, r7
 8006244:	f7ff ffc0 	bl	80061c8 <sbrk_aligned>
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	4604      	mov	r4, r0
 800624c:	d155      	bne.n	80062fa <_malloc_r+0xf2>
 800624e:	f8d8 4000 	ldr.w	r4, [r8]
 8006252:	4626      	mov	r6, r4
 8006254:	2e00      	cmp	r6, #0
 8006256:	d145      	bne.n	80062e4 <_malloc_r+0xdc>
 8006258:	2c00      	cmp	r4, #0
 800625a:	d048      	beq.n	80062ee <_malloc_r+0xe6>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	4631      	mov	r1, r6
 8006260:	4638      	mov	r0, r7
 8006262:	eb04 0903 	add.w	r9, r4, r3
 8006266:	f000 fb5d 	bl	8006924 <_sbrk_r>
 800626a:	4581      	cmp	r9, r0
 800626c:	d13f      	bne.n	80062ee <_malloc_r+0xe6>
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	1a6d      	subs	r5, r5, r1
 8006272:	4629      	mov	r1, r5
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff ffa7 	bl	80061c8 <sbrk_aligned>
 800627a:	3001      	adds	r0, #1
 800627c:	d037      	beq.n	80062ee <_malloc_r+0xe6>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	442b      	add	r3, r5
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	f8d8 3000 	ldr.w	r3, [r8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d038      	beq.n	80062fe <_malloc_r+0xf6>
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	42a2      	cmp	r2, r4
 8006290:	d12b      	bne.n	80062ea <_malloc_r+0xe2>
 8006292:	2200      	movs	r2, #0
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	e00f      	b.n	80062b8 <_malloc_r+0xb0>
 8006298:	6822      	ldr	r2, [r4, #0]
 800629a:	1b52      	subs	r2, r2, r5
 800629c:	d41f      	bmi.n	80062de <_malloc_r+0xd6>
 800629e:	2a0b      	cmp	r2, #11
 80062a0:	d917      	bls.n	80062d2 <_malloc_r+0xca>
 80062a2:	1961      	adds	r1, r4, r5
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	6025      	str	r5, [r4, #0]
 80062a8:	bf18      	it	ne
 80062aa:	6059      	strne	r1, [r3, #4]
 80062ac:	6863      	ldr	r3, [r4, #4]
 80062ae:	bf08      	it	eq
 80062b0:	f8c8 1000 	streq.w	r1, [r8]
 80062b4:	5162      	str	r2, [r4, r5]
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	4638      	mov	r0, r7
 80062ba:	f104 060b 	add.w	r6, r4, #11
 80062be:	f000 f829 	bl	8006314 <__malloc_unlock>
 80062c2:	f026 0607 	bic.w	r6, r6, #7
 80062c6:	1d23      	adds	r3, r4, #4
 80062c8:	1af2      	subs	r2, r6, r3
 80062ca:	d0ae      	beq.n	800622a <_malloc_r+0x22>
 80062cc:	1b9b      	subs	r3, r3, r6
 80062ce:	50a3      	str	r3, [r4, r2]
 80062d0:	e7ab      	b.n	800622a <_malloc_r+0x22>
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	6862      	ldr	r2, [r4, #4]
 80062d6:	d1dd      	bne.n	8006294 <_malloc_r+0x8c>
 80062d8:	f8c8 2000 	str.w	r2, [r8]
 80062dc:	e7ec      	b.n	80062b8 <_malloc_r+0xb0>
 80062de:	4623      	mov	r3, r4
 80062e0:	6864      	ldr	r4, [r4, #4]
 80062e2:	e7ac      	b.n	800623e <_malloc_r+0x36>
 80062e4:	4634      	mov	r4, r6
 80062e6:	6876      	ldr	r6, [r6, #4]
 80062e8:	e7b4      	b.n	8006254 <_malloc_r+0x4c>
 80062ea:	4613      	mov	r3, r2
 80062ec:	e7cc      	b.n	8006288 <_malloc_r+0x80>
 80062ee:	230c      	movs	r3, #12
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	4638      	mov	r0, r7
 80062f4:	f000 f80e 	bl	8006314 <__malloc_unlock>
 80062f8:	e797      	b.n	800622a <_malloc_r+0x22>
 80062fa:	6025      	str	r5, [r4, #0]
 80062fc:	e7dc      	b.n	80062b8 <_malloc_r+0xb0>
 80062fe:	605b      	str	r3, [r3, #4]
 8006300:	deff      	udf	#255	; 0xff
 8006302:	bf00      	nop
 8006304:	20000aac 	.word	0x20000aac

08006308 <__malloc_lock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_lock+0x8>)
 800630a:	f7ff bf0f 	b.w	800612c <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	20000aa8 	.word	0x20000aa8

08006314 <__malloc_unlock>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__malloc_unlock+0x8>)
 8006316:	f7ff bf0a 	b.w	800612e <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	20000aa8 	.word	0x20000aa8

08006320 <__ssputs_r>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	688e      	ldr	r6, [r1, #8]
 8006326:	461f      	mov	r7, r3
 8006328:	42be      	cmp	r6, r7
 800632a:	680b      	ldr	r3, [r1, #0]
 800632c:	4682      	mov	sl, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4690      	mov	r8, r2
 8006332:	d82c      	bhi.n	800638e <__ssputs_r+0x6e>
 8006334:	898a      	ldrh	r2, [r1, #12]
 8006336:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800633a:	d026      	beq.n	800638a <__ssputs_r+0x6a>
 800633c:	6965      	ldr	r5, [r4, #20]
 800633e:	6909      	ldr	r1, [r1, #16]
 8006340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006344:	eba3 0901 	sub.w	r9, r3, r1
 8006348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800634c:	1c7b      	adds	r3, r7, #1
 800634e:	444b      	add	r3, r9
 8006350:	106d      	asrs	r5, r5, #1
 8006352:	429d      	cmp	r5, r3
 8006354:	bf38      	it	cc
 8006356:	461d      	movcc	r5, r3
 8006358:	0553      	lsls	r3, r2, #21
 800635a:	d527      	bpl.n	80063ac <__ssputs_r+0x8c>
 800635c:	4629      	mov	r1, r5
 800635e:	f7ff ff53 	bl	8006208 <_malloc_r>
 8006362:	4606      	mov	r6, r0
 8006364:	b360      	cbz	r0, 80063c0 <__ssputs_r+0xa0>
 8006366:	6921      	ldr	r1, [r4, #16]
 8006368:	464a      	mov	r2, r9
 800636a:	f000 faeb 	bl	8006944 <memcpy>
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	6126      	str	r6, [r4, #16]
 800637c:	6165      	str	r5, [r4, #20]
 800637e:	444e      	add	r6, r9
 8006380:	eba5 0509 	sub.w	r5, r5, r9
 8006384:	6026      	str	r6, [r4, #0]
 8006386:	60a5      	str	r5, [r4, #8]
 8006388:	463e      	mov	r6, r7
 800638a:	42be      	cmp	r6, r7
 800638c:	d900      	bls.n	8006390 <__ssputs_r+0x70>
 800638e:	463e      	mov	r6, r7
 8006390:	6820      	ldr	r0, [r4, #0]
 8006392:	4632      	mov	r2, r6
 8006394:	4641      	mov	r1, r8
 8006396:	f000 faab 	bl	80068f0 <memmove>
 800639a:	68a3      	ldr	r3, [r4, #8]
 800639c:	1b9b      	subs	r3, r3, r6
 800639e:	60a3      	str	r3, [r4, #8]
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	4433      	add	r3, r6
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	2000      	movs	r0, #0
 80063a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ac:	462a      	mov	r2, r5
 80063ae:	f000 fad7 	bl	8006960 <_realloc_r>
 80063b2:	4606      	mov	r6, r0
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d1e0      	bne.n	800637a <__ssputs_r+0x5a>
 80063b8:	6921      	ldr	r1, [r4, #16]
 80063ba:	4650      	mov	r0, sl
 80063bc:	f7ff feb8 	bl	8006130 <_free_r>
 80063c0:	230c      	movs	r3, #12
 80063c2:	f8ca 3000 	str.w	r3, [sl]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	f04f 30ff 	mov.w	r0, #4294967295
 80063d2:	e7e9      	b.n	80063a8 <__ssputs_r+0x88>

080063d4 <_svfiprintf_r>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	4698      	mov	r8, r3
 80063da:	898b      	ldrh	r3, [r1, #12]
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	b09d      	sub	sp, #116	; 0x74
 80063e0:	4607      	mov	r7, r0
 80063e2:	460d      	mov	r5, r1
 80063e4:	4614      	mov	r4, r2
 80063e6:	d50e      	bpl.n	8006406 <_svfiprintf_r+0x32>
 80063e8:	690b      	ldr	r3, [r1, #16]
 80063ea:	b963      	cbnz	r3, 8006406 <_svfiprintf_r+0x32>
 80063ec:	2140      	movs	r1, #64	; 0x40
 80063ee:	f7ff ff0b 	bl	8006208 <_malloc_r>
 80063f2:	6028      	str	r0, [r5, #0]
 80063f4:	6128      	str	r0, [r5, #16]
 80063f6:	b920      	cbnz	r0, 8006402 <_svfiprintf_r+0x2e>
 80063f8:	230c      	movs	r3, #12
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e0d0      	b.n	80065a4 <_svfiprintf_r+0x1d0>
 8006402:	2340      	movs	r3, #64	; 0x40
 8006404:	616b      	str	r3, [r5, #20]
 8006406:	2300      	movs	r3, #0
 8006408:	9309      	str	r3, [sp, #36]	; 0x24
 800640a:	2320      	movs	r3, #32
 800640c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006410:	f8cd 800c 	str.w	r8, [sp, #12]
 8006414:	2330      	movs	r3, #48	; 0x30
 8006416:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065bc <_svfiprintf_r+0x1e8>
 800641a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800641e:	f04f 0901 	mov.w	r9, #1
 8006422:	4623      	mov	r3, r4
 8006424:	469a      	mov	sl, r3
 8006426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800642a:	b10a      	cbz	r2, 8006430 <_svfiprintf_r+0x5c>
 800642c:	2a25      	cmp	r2, #37	; 0x25
 800642e:	d1f9      	bne.n	8006424 <_svfiprintf_r+0x50>
 8006430:	ebba 0b04 	subs.w	fp, sl, r4
 8006434:	d00b      	beq.n	800644e <_svfiprintf_r+0x7a>
 8006436:	465b      	mov	r3, fp
 8006438:	4622      	mov	r2, r4
 800643a:	4629      	mov	r1, r5
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff ff6f 	bl	8006320 <__ssputs_r>
 8006442:	3001      	adds	r0, #1
 8006444:	f000 80a9 	beq.w	800659a <_svfiprintf_r+0x1c6>
 8006448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800644a:	445a      	add	r2, fp
 800644c:	9209      	str	r2, [sp, #36]	; 0x24
 800644e:	f89a 3000 	ldrb.w	r3, [sl]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a1 	beq.w	800659a <_svfiprintf_r+0x1c6>
 8006458:	2300      	movs	r3, #0
 800645a:	f04f 32ff 	mov.w	r2, #4294967295
 800645e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006462:	f10a 0a01 	add.w	sl, sl, #1
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	9307      	str	r3, [sp, #28]
 800646a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800646e:	931a      	str	r3, [sp, #104]	; 0x68
 8006470:	4654      	mov	r4, sl
 8006472:	2205      	movs	r2, #5
 8006474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006478:	4850      	ldr	r0, [pc, #320]	; (80065bc <_svfiprintf_r+0x1e8>)
 800647a:	f7f9 fed1 	bl	8000220 <memchr>
 800647e:	9a04      	ldr	r2, [sp, #16]
 8006480:	b9d8      	cbnz	r0, 80064ba <_svfiprintf_r+0xe6>
 8006482:	06d0      	lsls	r0, r2, #27
 8006484:	bf44      	itt	mi
 8006486:	2320      	movmi	r3, #32
 8006488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800648c:	0711      	lsls	r1, r2, #28
 800648e:	bf44      	itt	mi
 8006490:	232b      	movmi	r3, #43	; 0x2b
 8006492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006496:	f89a 3000 	ldrb.w	r3, [sl]
 800649a:	2b2a      	cmp	r3, #42	; 0x2a
 800649c:	d015      	beq.n	80064ca <_svfiprintf_r+0xf6>
 800649e:	9a07      	ldr	r2, [sp, #28]
 80064a0:	4654      	mov	r4, sl
 80064a2:	2000      	movs	r0, #0
 80064a4:	f04f 0c0a 	mov.w	ip, #10
 80064a8:	4621      	mov	r1, r4
 80064aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ae:	3b30      	subs	r3, #48	; 0x30
 80064b0:	2b09      	cmp	r3, #9
 80064b2:	d94d      	bls.n	8006550 <_svfiprintf_r+0x17c>
 80064b4:	b1b0      	cbz	r0, 80064e4 <_svfiprintf_r+0x110>
 80064b6:	9207      	str	r2, [sp, #28]
 80064b8:	e014      	b.n	80064e4 <_svfiprintf_r+0x110>
 80064ba:	eba0 0308 	sub.w	r3, r0, r8
 80064be:	fa09 f303 	lsl.w	r3, r9, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	46a2      	mov	sl, r4
 80064c8:	e7d2      	b.n	8006470 <_svfiprintf_r+0x9c>
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	9103      	str	r1, [sp, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bfbb      	ittet	lt
 80064d6:	425b      	neglt	r3, r3
 80064d8:	f042 0202 	orrlt.w	r2, r2, #2
 80064dc:	9307      	strge	r3, [sp, #28]
 80064de:	9307      	strlt	r3, [sp, #28]
 80064e0:	bfb8      	it	lt
 80064e2:	9204      	strlt	r2, [sp, #16]
 80064e4:	7823      	ldrb	r3, [r4, #0]
 80064e6:	2b2e      	cmp	r3, #46	; 0x2e
 80064e8:	d10c      	bne.n	8006504 <_svfiprintf_r+0x130>
 80064ea:	7863      	ldrb	r3, [r4, #1]
 80064ec:	2b2a      	cmp	r3, #42	; 0x2a
 80064ee:	d134      	bne.n	800655a <_svfiprintf_r+0x186>
 80064f0:	9b03      	ldr	r3, [sp, #12]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	9203      	str	r2, [sp, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bfb8      	it	lt
 80064fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006500:	3402      	adds	r4, #2
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80065cc <_svfiprintf_r+0x1f8>
 8006508:	7821      	ldrb	r1, [r4, #0]
 800650a:	2203      	movs	r2, #3
 800650c:	4650      	mov	r0, sl
 800650e:	f7f9 fe87 	bl	8000220 <memchr>
 8006512:	b138      	cbz	r0, 8006524 <_svfiprintf_r+0x150>
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	eba0 000a 	sub.w	r0, r0, sl
 800651a:	2240      	movs	r2, #64	; 0x40
 800651c:	4082      	lsls	r2, r0
 800651e:	4313      	orrs	r3, r2
 8006520:	3401      	adds	r4, #1
 8006522:	9304      	str	r3, [sp, #16]
 8006524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006528:	4825      	ldr	r0, [pc, #148]	; (80065c0 <_svfiprintf_r+0x1ec>)
 800652a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800652e:	2206      	movs	r2, #6
 8006530:	f7f9 fe76 	bl	8000220 <memchr>
 8006534:	2800      	cmp	r0, #0
 8006536:	d038      	beq.n	80065aa <_svfiprintf_r+0x1d6>
 8006538:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <_svfiprintf_r+0x1f0>)
 800653a:	bb1b      	cbnz	r3, 8006584 <_svfiprintf_r+0x1b0>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	3307      	adds	r3, #7
 8006540:	f023 0307 	bic.w	r3, r3, #7
 8006544:	3308      	adds	r3, #8
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654a:	4433      	add	r3, r6
 800654c:	9309      	str	r3, [sp, #36]	; 0x24
 800654e:	e768      	b.n	8006422 <_svfiprintf_r+0x4e>
 8006550:	fb0c 3202 	mla	r2, ip, r2, r3
 8006554:	460c      	mov	r4, r1
 8006556:	2001      	movs	r0, #1
 8006558:	e7a6      	b.n	80064a8 <_svfiprintf_r+0xd4>
 800655a:	2300      	movs	r3, #0
 800655c:	3401      	adds	r4, #1
 800655e:	9305      	str	r3, [sp, #20]
 8006560:	4619      	mov	r1, r3
 8006562:	f04f 0c0a 	mov.w	ip, #10
 8006566:	4620      	mov	r0, r4
 8006568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800656c:	3a30      	subs	r2, #48	; 0x30
 800656e:	2a09      	cmp	r2, #9
 8006570:	d903      	bls.n	800657a <_svfiprintf_r+0x1a6>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0c6      	beq.n	8006504 <_svfiprintf_r+0x130>
 8006576:	9105      	str	r1, [sp, #20]
 8006578:	e7c4      	b.n	8006504 <_svfiprintf_r+0x130>
 800657a:	fb0c 2101 	mla	r1, ip, r1, r2
 800657e:	4604      	mov	r4, r0
 8006580:	2301      	movs	r3, #1
 8006582:	e7f0      	b.n	8006566 <_svfiprintf_r+0x192>
 8006584:	ab03      	add	r3, sp, #12
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	462a      	mov	r2, r5
 800658a:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <_svfiprintf_r+0x1f4>)
 800658c:	a904      	add	r1, sp, #16
 800658e:	4638      	mov	r0, r7
 8006590:	f3af 8000 	nop.w
 8006594:	1c42      	adds	r2, r0, #1
 8006596:	4606      	mov	r6, r0
 8006598:	d1d6      	bne.n	8006548 <_svfiprintf_r+0x174>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	065b      	lsls	r3, r3, #25
 800659e:	f53f af2d 	bmi.w	80063fc <_svfiprintf_r+0x28>
 80065a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065a4:	b01d      	add	sp, #116	; 0x74
 80065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	462a      	mov	r2, r5
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <_svfiprintf_r+0x1f4>)
 80065b2:	a904      	add	r1, sp, #16
 80065b4:	4638      	mov	r0, r7
 80065b6:	f000 f879 	bl	80066ac <_printf_i>
 80065ba:	e7eb      	b.n	8006594 <_svfiprintf_r+0x1c0>
 80065bc:	08006a40 	.word	0x08006a40
 80065c0:	08006a4a 	.word	0x08006a4a
 80065c4:	00000000 	.word	0x00000000
 80065c8:	08006321 	.word	0x08006321
 80065cc:	08006a46 	.word	0x08006a46

080065d0 <_printf_common>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	4616      	mov	r6, r2
 80065d6:	4699      	mov	r9, r3
 80065d8:	688a      	ldr	r2, [r1, #8]
 80065da:	690b      	ldr	r3, [r1, #16]
 80065dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bfb8      	it	lt
 80065e4:	4613      	movlt	r3, r2
 80065e6:	6033      	str	r3, [r6, #0]
 80065e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065ec:	4607      	mov	r7, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b10a      	cbz	r2, 80065f6 <_printf_common+0x26>
 80065f2:	3301      	adds	r3, #1
 80065f4:	6033      	str	r3, [r6, #0]
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	0699      	lsls	r1, r3, #26
 80065fa:	bf42      	ittt	mi
 80065fc:	6833      	ldrmi	r3, [r6, #0]
 80065fe:	3302      	addmi	r3, #2
 8006600:	6033      	strmi	r3, [r6, #0]
 8006602:	6825      	ldr	r5, [r4, #0]
 8006604:	f015 0506 	ands.w	r5, r5, #6
 8006608:	d106      	bne.n	8006618 <_printf_common+0x48>
 800660a:	f104 0a19 	add.w	sl, r4, #25
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	6832      	ldr	r2, [r6, #0]
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	42ab      	cmp	r3, r5
 8006616:	dc26      	bgt.n	8006666 <_printf_common+0x96>
 8006618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800661c:	1e13      	subs	r3, r2, #0
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	bf18      	it	ne
 8006622:	2301      	movne	r3, #1
 8006624:	0692      	lsls	r2, r2, #26
 8006626:	d42b      	bmi.n	8006680 <_printf_common+0xb0>
 8006628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800662c:	4649      	mov	r1, r9
 800662e:	4638      	mov	r0, r7
 8006630:	47c0      	blx	r8
 8006632:	3001      	adds	r0, #1
 8006634:	d01e      	beq.n	8006674 <_printf_common+0xa4>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	6922      	ldr	r2, [r4, #16]
 800663a:	f003 0306 	and.w	r3, r3, #6
 800663e:	2b04      	cmp	r3, #4
 8006640:	bf02      	ittt	eq
 8006642:	68e5      	ldreq	r5, [r4, #12]
 8006644:	6833      	ldreq	r3, [r6, #0]
 8006646:	1aed      	subeq	r5, r5, r3
 8006648:	68a3      	ldr	r3, [r4, #8]
 800664a:	bf0c      	ite	eq
 800664c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006650:	2500      	movne	r5, #0
 8006652:	4293      	cmp	r3, r2
 8006654:	bfc4      	itt	gt
 8006656:	1a9b      	subgt	r3, r3, r2
 8006658:	18ed      	addgt	r5, r5, r3
 800665a:	2600      	movs	r6, #0
 800665c:	341a      	adds	r4, #26
 800665e:	42b5      	cmp	r5, r6
 8006660:	d11a      	bne.n	8006698 <_printf_common+0xc8>
 8006662:	2000      	movs	r0, #0
 8006664:	e008      	b.n	8006678 <_printf_common+0xa8>
 8006666:	2301      	movs	r3, #1
 8006668:	4652      	mov	r2, sl
 800666a:	4649      	mov	r1, r9
 800666c:	4638      	mov	r0, r7
 800666e:	47c0      	blx	r8
 8006670:	3001      	adds	r0, #1
 8006672:	d103      	bne.n	800667c <_printf_common+0xac>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667c:	3501      	adds	r5, #1
 800667e:	e7c6      	b.n	800660e <_printf_common+0x3e>
 8006680:	18e1      	adds	r1, r4, r3
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	2030      	movs	r0, #48	; 0x30
 8006686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800668a:	4422      	add	r2, r4
 800668c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006694:	3302      	adds	r3, #2
 8006696:	e7c7      	b.n	8006628 <_printf_common+0x58>
 8006698:	2301      	movs	r3, #1
 800669a:	4622      	mov	r2, r4
 800669c:	4649      	mov	r1, r9
 800669e:	4638      	mov	r0, r7
 80066a0:	47c0      	blx	r8
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0e6      	beq.n	8006674 <_printf_common+0xa4>
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7d9      	b.n	800665e <_printf_common+0x8e>
	...

080066ac <_printf_i>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	7e0f      	ldrb	r7, [r1, #24]
 80066b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066b4:	2f78      	cmp	r7, #120	; 0x78
 80066b6:	4691      	mov	r9, r2
 80066b8:	4680      	mov	r8, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	469a      	mov	sl, r3
 80066be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066c2:	d807      	bhi.n	80066d4 <_printf_i+0x28>
 80066c4:	2f62      	cmp	r7, #98	; 0x62
 80066c6:	d80a      	bhi.n	80066de <_printf_i+0x32>
 80066c8:	2f00      	cmp	r7, #0
 80066ca:	f000 80d4 	beq.w	8006876 <_printf_i+0x1ca>
 80066ce:	2f58      	cmp	r7, #88	; 0x58
 80066d0:	f000 80c0 	beq.w	8006854 <_printf_i+0x1a8>
 80066d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066dc:	e03a      	b.n	8006754 <_printf_i+0xa8>
 80066de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066e2:	2b15      	cmp	r3, #21
 80066e4:	d8f6      	bhi.n	80066d4 <_printf_i+0x28>
 80066e6:	a101      	add	r1, pc, #4	; (adr r1, 80066ec <_printf_i+0x40>)
 80066e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066ec:	08006745 	.word	0x08006745
 80066f0:	08006759 	.word	0x08006759
 80066f4:	080066d5 	.word	0x080066d5
 80066f8:	080066d5 	.word	0x080066d5
 80066fc:	080066d5 	.word	0x080066d5
 8006700:	080066d5 	.word	0x080066d5
 8006704:	08006759 	.word	0x08006759
 8006708:	080066d5 	.word	0x080066d5
 800670c:	080066d5 	.word	0x080066d5
 8006710:	080066d5 	.word	0x080066d5
 8006714:	080066d5 	.word	0x080066d5
 8006718:	0800685d 	.word	0x0800685d
 800671c:	08006785 	.word	0x08006785
 8006720:	08006817 	.word	0x08006817
 8006724:	080066d5 	.word	0x080066d5
 8006728:	080066d5 	.word	0x080066d5
 800672c:	0800687f 	.word	0x0800687f
 8006730:	080066d5 	.word	0x080066d5
 8006734:	08006785 	.word	0x08006785
 8006738:	080066d5 	.word	0x080066d5
 800673c:	080066d5 	.word	0x080066d5
 8006740:	0800681f 	.word	0x0800681f
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	602a      	str	r2, [r5, #0]
 800674c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006754:	2301      	movs	r3, #1
 8006756:	e09f      	b.n	8006898 <_printf_i+0x1ec>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	0607      	lsls	r7, r0, #24
 800675e:	f103 0104 	add.w	r1, r3, #4
 8006762:	6029      	str	r1, [r5, #0]
 8006764:	d501      	bpl.n	800676a <_printf_i+0xbe>
 8006766:	681e      	ldr	r6, [r3, #0]
 8006768:	e003      	b.n	8006772 <_printf_i+0xc6>
 800676a:	0646      	lsls	r6, r0, #25
 800676c:	d5fb      	bpl.n	8006766 <_printf_i+0xba>
 800676e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006772:	2e00      	cmp	r6, #0
 8006774:	da03      	bge.n	800677e <_printf_i+0xd2>
 8006776:	232d      	movs	r3, #45	; 0x2d
 8006778:	4276      	negs	r6, r6
 800677a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800677e:	485a      	ldr	r0, [pc, #360]	; (80068e8 <_printf_i+0x23c>)
 8006780:	230a      	movs	r3, #10
 8006782:	e012      	b.n	80067aa <_printf_i+0xfe>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	6029      	str	r1, [r5, #0]
 800678c:	0605      	lsls	r5, r0, #24
 800678e:	d501      	bpl.n	8006794 <_printf_i+0xe8>
 8006790:	681e      	ldr	r6, [r3, #0]
 8006792:	e002      	b.n	800679a <_printf_i+0xee>
 8006794:	0641      	lsls	r1, r0, #25
 8006796:	d5fb      	bpl.n	8006790 <_printf_i+0xe4>
 8006798:	881e      	ldrh	r6, [r3, #0]
 800679a:	4853      	ldr	r0, [pc, #332]	; (80068e8 <_printf_i+0x23c>)
 800679c:	2f6f      	cmp	r7, #111	; 0x6f
 800679e:	bf0c      	ite	eq
 80067a0:	2308      	moveq	r3, #8
 80067a2:	230a      	movne	r3, #10
 80067a4:	2100      	movs	r1, #0
 80067a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067aa:	6865      	ldr	r5, [r4, #4]
 80067ac:	60a5      	str	r5, [r4, #8]
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	bfa2      	ittt	ge
 80067b2:	6821      	ldrge	r1, [r4, #0]
 80067b4:	f021 0104 	bicge.w	r1, r1, #4
 80067b8:	6021      	strge	r1, [r4, #0]
 80067ba:	b90e      	cbnz	r6, 80067c0 <_printf_i+0x114>
 80067bc:	2d00      	cmp	r5, #0
 80067be:	d04b      	beq.n	8006858 <_printf_i+0x1ac>
 80067c0:	4615      	mov	r5, r2
 80067c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80067c6:	fb03 6711 	mls	r7, r3, r1, r6
 80067ca:	5dc7      	ldrb	r7, [r0, r7]
 80067cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067d0:	4637      	mov	r7, r6
 80067d2:	42bb      	cmp	r3, r7
 80067d4:	460e      	mov	r6, r1
 80067d6:	d9f4      	bls.n	80067c2 <_printf_i+0x116>
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d10b      	bne.n	80067f4 <_printf_i+0x148>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07de      	lsls	r6, r3, #31
 80067e0:	d508      	bpl.n	80067f4 <_printf_i+0x148>
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6861      	ldr	r1, [r4, #4]
 80067e6:	4299      	cmp	r1, r3
 80067e8:	bfde      	ittt	le
 80067ea:	2330      	movle	r3, #48	; 0x30
 80067ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067f4:	1b52      	subs	r2, r2, r5
 80067f6:	6122      	str	r2, [r4, #16]
 80067f8:	f8cd a000 	str.w	sl, [sp]
 80067fc:	464b      	mov	r3, r9
 80067fe:	aa03      	add	r2, sp, #12
 8006800:	4621      	mov	r1, r4
 8006802:	4640      	mov	r0, r8
 8006804:	f7ff fee4 	bl	80065d0 <_printf_common>
 8006808:	3001      	adds	r0, #1
 800680a:	d14a      	bne.n	80068a2 <_printf_i+0x1f6>
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	b004      	add	sp, #16
 8006812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f043 0320 	orr.w	r3, r3, #32
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	4833      	ldr	r0, [pc, #204]	; (80068ec <_printf_i+0x240>)
 8006820:	2778      	movs	r7, #120	; 0x78
 8006822:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	6829      	ldr	r1, [r5, #0]
 800682a:	061f      	lsls	r7, r3, #24
 800682c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006830:	d402      	bmi.n	8006838 <_printf_i+0x18c>
 8006832:	065f      	lsls	r7, r3, #25
 8006834:	bf48      	it	mi
 8006836:	b2b6      	uxthmi	r6, r6
 8006838:	07df      	lsls	r7, r3, #31
 800683a:	bf48      	it	mi
 800683c:	f043 0320 	orrmi.w	r3, r3, #32
 8006840:	6029      	str	r1, [r5, #0]
 8006842:	bf48      	it	mi
 8006844:	6023      	strmi	r3, [r4, #0]
 8006846:	b91e      	cbnz	r6, 8006850 <_printf_i+0x1a4>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	f023 0320 	bic.w	r3, r3, #32
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	2310      	movs	r3, #16
 8006852:	e7a7      	b.n	80067a4 <_printf_i+0xf8>
 8006854:	4824      	ldr	r0, [pc, #144]	; (80068e8 <_printf_i+0x23c>)
 8006856:	e7e4      	b.n	8006822 <_printf_i+0x176>
 8006858:	4615      	mov	r5, r2
 800685a:	e7bd      	b.n	80067d8 <_printf_i+0x12c>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6826      	ldr	r6, [r4, #0]
 8006860:	6961      	ldr	r1, [r4, #20]
 8006862:	1d18      	adds	r0, r3, #4
 8006864:	6028      	str	r0, [r5, #0]
 8006866:	0635      	lsls	r5, r6, #24
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	d501      	bpl.n	8006870 <_printf_i+0x1c4>
 800686c:	6019      	str	r1, [r3, #0]
 800686e:	e002      	b.n	8006876 <_printf_i+0x1ca>
 8006870:	0670      	lsls	r0, r6, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0x1c0>
 8006874:	8019      	strh	r1, [r3, #0]
 8006876:	2300      	movs	r3, #0
 8006878:	6123      	str	r3, [r4, #16]
 800687a:	4615      	mov	r5, r2
 800687c:	e7bc      	b.n	80067f8 <_printf_i+0x14c>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	1d1a      	adds	r2, r3, #4
 8006882:	602a      	str	r2, [r5, #0]
 8006884:	681d      	ldr	r5, [r3, #0]
 8006886:	6862      	ldr	r2, [r4, #4]
 8006888:	2100      	movs	r1, #0
 800688a:	4628      	mov	r0, r5
 800688c:	f7f9 fcc8 	bl	8000220 <memchr>
 8006890:	b108      	cbz	r0, 8006896 <_printf_i+0x1ea>
 8006892:	1b40      	subs	r0, r0, r5
 8006894:	6060      	str	r0, [r4, #4]
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	6123      	str	r3, [r4, #16]
 800689a:	2300      	movs	r3, #0
 800689c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a0:	e7aa      	b.n	80067f8 <_printf_i+0x14c>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	462a      	mov	r2, r5
 80068a6:	4649      	mov	r1, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	47d0      	blx	sl
 80068ac:	3001      	adds	r0, #1
 80068ae:	d0ad      	beq.n	800680c <_printf_i+0x160>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	079b      	lsls	r3, r3, #30
 80068b4:	d413      	bmi.n	80068de <_printf_i+0x232>
 80068b6:	68e0      	ldr	r0, [r4, #12]
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	4298      	cmp	r0, r3
 80068bc:	bfb8      	it	lt
 80068be:	4618      	movlt	r0, r3
 80068c0:	e7a6      	b.n	8006810 <_printf_i+0x164>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4632      	mov	r2, r6
 80068c6:	4649      	mov	r1, r9
 80068c8:	4640      	mov	r0, r8
 80068ca:	47d0      	blx	sl
 80068cc:	3001      	adds	r0, #1
 80068ce:	d09d      	beq.n	800680c <_printf_i+0x160>
 80068d0:	3501      	adds	r5, #1
 80068d2:	68e3      	ldr	r3, [r4, #12]
 80068d4:	9903      	ldr	r1, [sp, #12]
 80068d6:	1a5b      	subs	r3, r3, r1
 80068d8:	42ab      	cmp	r3, r5
 80068da:	dcf2      	bgt.n	80068c2 <_printf_i+0x216>
 80068dc:	e7eb      	b.n	80068b6 <_printf_i+0x20a>
 80068de:	2500      	movs	r5, #0
 80068e0:	f104 0619 	add.w	r6, r4, #25
 80068e4:	e7f5      	b.n	80068d2 <_printf_i+0x226>
 80068e6:	bf00      	nop
 80068e8:	08006a51 	.word	0x08006a51
 80068ec:	08006a62 	.word	0x08006a62

080068f0 <memmove>:
 80068f0:	4288      	cmp	r0, r1
 80068f2:	b510      	push	{r4, lr}
 80068f4:	eb01 0402 	add.w	r4, r1, r2
 80068f8:	d902      	bls.n	8006900 <memmove+0x10>
 80068fa:	4284      	cmp	r4, r0
 80068fc:	4623      	mov	r3, r4
 80068fe:	d807      	bhi.n	8006910 <memmove+0x20>
 8006900:	1e43      	subs	r3, r0, #1
 8006902:	42a1      	cmp	r1, r4
 8006904:	d008      	beq.n	8006918 <memmove+0x28>
 8006906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800690a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800690e:	e7f8      	b.n	8006902 <memmove+0x12>
 8006910:	4402      	add	r2, r0
 8006912:	4601      	mov	r1, r0
 8006914:	428a      	cmp	r2, r1
 8006916:	d100      	bne.n	800691a <memmove+0x2a>
 8006918:	bd10      	pop	{r4, pc}
 800691a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800691e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006922:	e7f7      	b.n	8006914 <memmove+0x24>

08006924 <_sbrk_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d06      	ldr	r5, [pc, #24]	; (8006940 <_sbrk_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa fb86 	bl	8001040 <_sbrk>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_sbrk_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_sbrk_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20000aa4 	.word	0x20000aa4

08006944 <memcpy>:
 8006944:	440a      	add	r2, r1
 8006946:	4291      	cmp	r1, r2
 8006948:	f100 33ff 	add.w	r3, r0, #4294967295
 800694c:	d100      	bne.n	8006950 <memcpy+0xc>
 800694e:	4770      	bx	lr
 8006950:	b510      	push	{r4, lr}
 8006952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800695a:	4291      	cmp	r1, r2
 800695c:	d1f9      	bne.n	8006952 <memcpy+0xe>
 800695e:	bd10      	pop	{r4, pc}

08006960 <_realloc_r>:
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	4680      	mov	r8, r0
 8006966:	4614      	mov	r4, r2
 8006968:	460e      	mov	r6, r1
 800696a:	b921      	cbnz	r1, 8006976 <_realloc_r+0x16>
 800696c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006970:	4611      	mov	r1, r2
 8006972:	f7ff bc49 	b.w	8006208 <_malloc_r>
 8006976:	b92a      	cbnz	r2, 8006984 <_realloc_r+0x24>
 8006978:	f7ff fbda 	bl	8006130 <_free_r>
 800697c:	4625      	mov	r5, r4
 800697e:	4628      	mov	r0, r5
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006984:	f000 f81b 	bl	80069be <_malloc_usable_size_r>
 8006988:	4284      	cmp	r4, r0
 800698a:	4607      	mov	r7, r0
 800698c:	d802      	bhi.n	8006994 <_realloc_r+0x34>
 800698e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006992:	d812      	bhi.n	80069ba <_realloc_r+0x5a>
 8006994:	4621      	mov	r1, r4
 8006996:	4640      	mov	r0, r8
 8006998:	f7ff fc36 	bl	8006208 <_malloc_r>
 800699c:	4605      	mov	r5, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d0ed      	beq.n	800697e <_realloc_r+0x1e>
 80069a2:	42bc      	cmp	r4, r7
 80069a4:	4622      	mov	r2, r4
 80069a6:	4631      	mov	r1, r6
 80069a8:	bf28      	it	cs
 80069aa:	463a      	movcs	r2, r7
 80069ac:	f7ff ffca 	bl	8006944 <memcpy>
 80069b0:	4631      	mov	r1, r6
 80069b2:	4640      	mov	r0, r8
 80069b4:	f7ff fbbc 	bl	8006130 <_free_r>
 80069b8:	e7e1      	b.n	800697e <_realloc_r+0x1e>
 80069ba:	4635      	mov	r5, r6
 80069bc:	e7df      	b.n	800697e <_realloc_r+0x1e>

080069be <_malloc_usable_size_r>:
 80069be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c2:	1f18      	subs	r0, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfbc      	itt	lt
 80069c8:	580b      	ldrlt	r3, [r1, r0]
 80069ca:	18c0      	addlt	r0, r0, r3
 80069cc:	4770      	bx	lr
	...

080069d0 <_init>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr

080069dc <_fini>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr
